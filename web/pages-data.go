// Code generated for package web by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\xcd\x8e\xe3\xb8\x11\xbe\xf7\x53\xd4\x12\x73\x98\x01\x96\x56\xb7\xec\x15\x36\xbd\xa2\x81\xdd\xf1\x22\x69\x60\x33\x93\x4c\xa3\x07\xb9\x35\x28\xa9\x6c\x71\x9a\x22\x35\x24\x25\xdb\x31\xfa\x1a\x04\x39\xe5\x90\x00\x01\x82\x20\x4f\x90\x17\xc8\x21\x79\x99\x9d\x3c\x47\x40\x49\xb6\xe5\x9f\xee\xe9\xa0\x7b\x26\x87\xd5\xc1\xe2\x4f\xd5\xc7\xaa\xaf\x8a\x45\x53\x71\xee\x0a\x09\x92\xab\x19\x23\xa8\xc8\xf8\xe4\x24\xce\x91\x67\xe3\x13\x80\xb8\x40\xc7\x21\xcd\xb9\xb1\xe8\x18\xa9\xdc\x94\x7e\x4d\xb6\x13\xb9\x73\x25\xc5\xf7\x95\xa8\x19\xf9\x0d\xbd\xfa\x96\xbe\xd4\x45\xc9\x9d\x48\x24\x12\x48\xb5\x72\xa8\x1c\x23\x17\xdf\x33\xcc\x66\xd8\xd3\x53\xbc\x40\x46\x6a\x81\xf3\x52\x1b\xd7\x13\x9d\x8b\xcc\xe5\x2c\xc3\x5a\xa4\x48\x9b\xce\x97\x20\x94\x70\x82\x4b\x6a\x53\x2e\x91\x9d\x1d\xc0\xf0\xca\xe5\xda\xf4\x40\xde\x89\x6e\x2d\x27\x9c\xc4\xf1\x64\xf2\xea\x92\xfe\xfc\x75\x1c\xb4\x5d\x3f\xf1\x05\xa5\xf0\x9d\xd6\xce\x3a\xc3\x4b\x78\x79\x79\x09\x94\x36\x13\x52\xa8\x1b\x30\x28\x19\xb1\x6e\x29\xd1\xe6\x88\x8e\x40\x6e\x70\xca\x48\x60\x1d\x77\x22\x0d\x92\xb5\xe2\xa0\x10\x6a\x90\x5a\x4b\x1e\xac\x9a\xea\xa2\xd0\x6b\x9d\x38\x68\x59\x3e\x89\x13\x9d\x2d\x1b\x0c\x3f\x80\xc6\x37\x01\xe2\x4c\xd4\x90\x4a\x6e\x2d\x23\x8a\xd7\x09\x37\xd0\xbe\x68\xc6\xcd\x0d\x24\xb3\xf6\x6d\x73\x9e\xe9\x39\xb5\x05\x69\xd5\x76\x15\x3d\x27\x5c\x28\x34\x90\xd1\xa9\xc4\x05\xbc\xab\xac\x13\xd3\x25\xed\xc8\xa2\x09\xba\x39\x36\x41\x87\xee\x89\xf9\xda\x68\xb2\xbb\x3c\x4d\x0c\x57\xd9\x1a\x88\x4b\x31\x53\x54\x38\x2c\x2c\x4d\x51\x39\x34\x3d\x0c\x80\xd8\xd6\x33\x58\x14\x52\x59\x46\x7c\x96\x9c\x07\xc1\x7c\x3e\x1f\xcc\x87\x03\x6d\x66\x41\x78\x7a\x7a\x1a\xd8\x7a\x46\xa0\x0d\x38\x09\x4f\x09\xe4\x28\x66\xb9\x6b\xdb\x53\x21\x25\x23\x4a\x2b\x24\x60\x9d\xd1\x37\xc8\x48\x5a\x19\x83\xca\xbd\xd4\x52\x1b\xd2\x5b\x0a\x3a\x09\x2a\x85\xc2\x94\x97\x8c\x18\x5d\xa9\x8c\xf4\x87\xdf\x69\xa1\xf6\xc7\xd7\x4b\x13\xe0\x46\x70\x9a\x8b\x2c\x43\xc5\x88\x33\x15\x6e\x3c\x2f\x0c\x0d\x77\xd7\xf2\x49\xfb\x9d\x5e\x30\x72\x0a\xa7\x10\x8e\x20\x1c\x11\x98\xea\xb4\xb2\x3c\x91\xc8\xc8\x94\x4b\x8b\x3b\x4c\x00\xc4\x25\x77\x39\x64\x8c\xfc\x32\x1c\xc2\xd9\xcf\x78\x08\x21\x78\xed\x33\x1a\x42\xf8\x8b\x61\xbf\x4f\xc3\xb7\x5f\x6f\xfb\x10\xd2\x30\x1f\xc9\x90\x0e\xf3\x48\x86\x30\xcc\x47\xfd\x39\x08\x7f\x4b\x20\xd8\x5b\x2a\x15\x26\x95\x08\xe9\x82\x91\xb3\x90\x40\xba\x64\xe4\x6c\x48\xc0\x30\x32\xf2\xc2\xb1\x67\x7d\x37\x4e\xce\x68\x35\xdb\x6e\x92\xae\xbf\x4d\x87\x80\x6f\x12\x2b\xc8\x44\xdd\x25\xe7\xba\xd9\x26\x71\x9b\xb3\xcd\xbe\xe4\x42\x81\xd1\x9e\x0a\xdf\xf4\x64\x2f\xdb\x8e\x99\x09\x45\x9d\x2e\xcf\x61\x78\x5a\x2e\xc8\x36\xc9\x8f\xe7\xad\xa4\x45\x46\x23\xd0\xd3\xa9\x45\xe7\xdb\xc3\x7e\x8e\x4e\xb5\x29\x80\xa7\x4e\x68\xe5\x77\x17\xaf\x91\x40\x81\x2e\xd7\x19\x23\xa5\xb6\xce\x17\xb1\x9e\x93\x49\xe5\x9c\x56\xe0\x96\x25\x32\x62\xab\xa4\x10\x6e\x13\xe2\xc4\x29\x48\x9c\xa2\xa5\x11\x05\x37\xcb\x7d\x8b\x13\xed\x9c\x2e\xce\x21\x3c\x2d\x17\xdf\x90\xf1\x25\xaf\x31\x0e\x5a\xbc\xdd\x35\x7a\xd6\xfb\xa2\x26\xd1\xed\xa7\x41\xfe\xd5\x9e\xc0\xf5\xb5\x27\x8f\x8c\x27\xaf\x2e\x7f\xfc\xd7\x5f\x3f\xfc\xf3\x4f\x1f\xfe\xfc\xbb\x38\xc8\xbf\xda\xd3\x3b\x44\xbe\xbe\xf6\x25\x63\xd7\xc9\x7d\x51\x4f\x11\x4d\x73\x4c\x6f\xf6\xec\x68\x04\x85\x2a\x2b\x77\x28\x4a\x9b\x71\xd2\x31\x65\x78\x26\x34\xe9\xca\xec\x44\xd9\x57\xbc\x40\x02\x22\x63\x84\x4b\x91\x29\x4b\xa0\xe6\xb2\xc2\x6d\xb7\xc1\xc0\xec\xc8\x7a\x92\x27\x28\x8f\xac\xd7\x8c\xfb\x1d\x64\x36\x28\x87\xda\x00\xdf\x36\x53\x87\xb0\x41\xa3\xbf\xaf\xd1\x4b\xd4\xee\xf9\x18\x4f\x33\xa3\xab\xf2\x18\x4f\xad\xdd\x8d\x79\x13\x65\x2f\x26\x64\x7c\x31\xb9\x63\xd5\xe3\xac\x6a\xe5\x8c\x96\x3d\x12\x2f\x26\x2d\x85\x5d\xb3\x63\x70\xb5\x1a\x4c\x5e\x5d\x0e\x2e\x26\xb7\xb7\x07\x66\x7c\x32\x77\x2e\x31\x35\x3e\x4d\xdb\xf7\xe3\xdc\xea\xb0\xd6\xae\xad\xbb\xbb\xee\xb5\xa3\x77\xbb\x78\x72\xaf\xdb\x87\x42\x8f\xd9\x74\x17\xbf\x7a\x3b\x7a\xda\xcd\xf6\x10\xd6\x45\x59\x8f\xae\x2b\x23\xc9\xf8\xea\xcd\x0f\x1f\x63\xbc\xdd\x85\x5e\xfa\x3e\xf2\x2f\xca\x7a\x74\xe5\x65\x3c\xf5\x1b\xfc\xf6\x50\xcb\xd0\xa6\x46\x24\x98\x25\xcb\xed\xdc\x75\x8e\xb2\xec\x87\xc6\x23\x0c\xae\xde\xfc\x70\x24\x30\xfe\x84\x28\xb8\x94\x3b\xe0\x1d\x40\xdf\x26\x87\x0b\x07\xfe\x87\x16\x95\xc3\x8c\x8c\xdf\xe0\xfb\x0a\xad\x03\xff\x97\x61\x86\x0e\x38\x78\x6d\xe0\x59\x66\xd0\xda\x2f\xe2\xa0\x81\x7d\x48\x1e\x3c\x86\xe9\x4c\xfb\x53\xc8\x92\xf1\xa4\x6d\xdc\xcd\xb8\xb7\x9d\x1b\xe4\xc7\x99\xde\x78\xbf\x06\xec\x71\x3f\x59\x0f\x19\x3d\xb7\x8c\x0c\xef\xa4\xbe\xd3\x6d\xd9\x1b\x9f\xac\x56\x14\x0c\x57\x33\x84\x67\xe2\x4b\x78\x56\xc3\x39\x83\x36\x14\x1d\xe2\xed\xed\xc9\x6a\xf5\xac\x6e\x5e\x14\x50\x65\x40\x6f\x6f\x8f\xd4\xc0\xb5\xe9\x1f\x8f\xdd\x8e\x05\xf7\xc7\xef\xb5\x42\x50\x38\xf7\x7f\x9e\x40\x2b\x84\x56\xf5\x23\x71\xdb\x5f\x7f\xfb\x3c\x28\xa2\xf0\x90\x33\xab\xdd\x14\x8d\x50\xa2\x17\xe4\xee\x33\x6c\xe3\x35\x2a\xde\x5c\x48\xb6\x21\xfb\xbe\x1b\x79\xdc\x79\xd5\x07\x1f\xb7\x90\xf7\x1f\x48\x9f\xb9\xbc\x45\xff\x97\xf2\x16\x3d\x59\x79\xeb\x02\xd8\x02\x6e\xa3\x17\x5d\xdd\x59\xde\xa2\xc3\xf2\xe6\x2f\x1f\xf6\x3c\x08\x78\x29\xa8\x97\x18\x88\x72\x60\x93\x40\x1c\xf5\x64\x67\xbb\x44\x8f\x2a\x75\xd1\xe7\x2d\x75\xd1\x53\x97\xba\xe8\x48\xa9\x8b\x1e\x58\xea\xa2\x87\x96\xba\xe8\x53\x95\xba\xe8\x27\x59\xea\xa2\xc3\x52\x17\x3d\x59\xa9\x8b\x3e\x6d\xa9\xfb\x5f\xae\x68\x77\xdd\xc2\xe2\xc0\x9b\x7f\xff\x75\xd5\x87\xb6\x51\x89\x7d\xce\x96\xae\x15\x98\x56\xaa\xb9\x4c\xfa\xfd\xfb\xeb\x0a\xcd\xf2\xad\x4f\xec\x44\xe2\xf3\x17\xab\x0e\xae\xe6\x06\xde\xfb\x29\x60\x30\x17\x2a\xd3\xf3\x81\xd4\x29\xf7\x5a\x03\x8b\xdc\xa4\xf9\xc0\x56\x89\x75\x46\xa8\xd9\xf3\xb3\x17\xdf\x74\x6a\x62\x0a\xcf\x3b\x35\xc6\x80\xf8\xab\xea\xeb\x1b\xd6\x7c\x64\x78\x01\xab\x8d\xe9\xfb\x88\xb9\xc1\x29\x30\x20\xc1\xf6\xeb\x03\x97\x68\xdc\x73\xf2\xe3\xbf\xff\xf6\xe1\x1f\x7f\xf9\xcf\xef\xff\xf8\xe1\x0f\x7f\x27\x2f\xba\xd9\x76\xaf\xb4\xbf\x87\x2e\x34\x8e\xaf\xdd\x3d\x89\x83\xdc\x15\x72\xfc\xdf\x00\x00\x00\xff\xff\xe4\x1e\x77\xb2\xf6\x13\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 5110, mode: os.FileMode(420), modTime: time.Unix(1598541634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
