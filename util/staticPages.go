// Code generated by go-bindata.
// sources:
// static/pages/writing.html
// DO NOT EDIT!

package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5b\xff\x73\x14\xc7\x95\xff\x5d\x7f\x45\x5f\x5b\x55\xbb\x3a\x6b\x66\xf4\x8d\x09\x11\xbb\x9b\xc2\xc8\x17\x2b\x07\x84\xe2\x8b\x93\xab\x54\x8a\xf4\xce\xf4\xee\x0e\x9a\xed\x19\x7a\x7a\x57\x08\xd5\x56\x09\x02\x18\x7c\x80\xe0\x8e\x10\x4c\xb0\x39\x72\xb6\x8b\xcb\xd9\x92\x7d\x95\x8a\x65\x30\xf0\xc7\x58\xb3\x2b\xfd\x94\x7f\xe1\xaa\x7b\xbe\xf5\xec\xce\xa2\x05\x49\x18\x13\x7e\x40\x33\xdd\xaf\x5f\xbf\x7e\x9f\xd7\xaf\x3f\xdd\xd3\x5b\xa8\xb1\xba\x0d\x6c\x44\xaa\x45\x78\xb6\x06\x4b\x43\x43\x85\x1a\x46\x66\x69\x08\x80\x42\x1d\x33\x04\x8c\x1a\xa2\x1e\x66\x45\xd8\x60\x15\x65\x2f\x4c\x2a\x6a\x8c\xb9\x0a\x3e\xdd\xb0\x9a\x45\xf8\x6b\xe5\xc4\x7e\xe5\x80\x53\x77\x11\xb3\xca\x36\x86\xc0\x70\x08\xc3\x84\x15\xe1\xec\xbb\x45\x6c\x56\xb1\xd4\x8e\xa0\x3a\x2e\xc2\xa6\x85\xe7\x5d\x87\x32\x49\x74\xde\x32\x59\xad\x68\xe2\xa6\x65\x60\x45\xbc\x8c\x02\x8b\x58\xcc\x42\xb6\xe2\x19\xc8\xc6\xc5\xf1\x1e\x35\xa8\xc1\x6a\x0e\x95\x94\x9c\xb2\xc2\xbe\x98\xc5\x6c\x5c\x3a\xf4\x6f\x33\x33\x87\x8f\x15\xb4\xe0\x8d\x97\xdb\x16\x99\x03\x14\xdb\x45\xe8\xb1\x05\x1b\x7b\x35\x8c\x19\x04\x35\x8a\x2b\x45\xa8\x79\x0c\x31\xcb\xd0\xca\x8e\xc3\x3c\x46\x91\xab\xd6\x2d\xa2\x1a\x9e\x07\x07\x6e\x6a\x38\xf5\xba\x23\xb5\xf1\x0c\x6a\xb9\x0c\x78\xd4\x48\x64\x4e\x9d\x6e\x60\xba\xa0\x4c\xaa\x7b\xd4\x71\xd1\xc3\x29\x0f\x96\x0a\x5a\x20\x5a\x1a\x2a\x68\x01\x02\x43\x85\xb2\x63\x2e\x08\x2d\xbc\x00\x53\xfe\x08\x40\xc1\xb4\x9a\xc0\xb0\x91\xe7\x15\x21\x41\xcd\x32\xa2\x20\xf8\xa3\x98\x88\xce\x81\x72\x35\xf8\xeb\xd5\x90\xe9\xcc\x2b\x5e\x1d\x06\xcd\xd2\x0d\xb9\xbf\x90\x45\x30\x05\xa6\x52\xb1\xf1\x19\x70\xaa\xe1\x31\xab\xb2\xa0\x84\x8e\x54\xca\x98\xcd\x63\x4c\xe2\xc6\x00\x14\x10\x60\x88\x56\x79\x28\x94\x6d\x44\xe6\xa2\x91\xf3\x38\xf0\xa6\x35\xad\x6a\xb1\x5a\xa3\xac\x1a\x4e\x5d\x43\xb6\x43\xaa\xc4\x32\xb0\x56\x5f\x30\x4d\xe2\xc1\xb4\xbd\x4a\x99\x22\x62\x46\x3d\x23\xdb\xaa\x12\xc5\x62\xb8\xee\x29\x06\x26\x0c\x53\xa9\x53\xee\xc1\x66\x15\x9c\xa9\xdb\xc4\x0b\xba\x9a\xd6\xb4\xf9\xf9\x79\x75\x7e\x52\x75\x68\x55\x9b\x18\x1b\x1b\xd3\xbc\x66\x15\x82\x20\x7a\xe0\xc4\x18\x04\x35\x6c\x55\x6b\x2c\x78\xae\x58\xb6\x5d\x84\xc4\x21\x18\x02\x8f\x51\x67\x0e\x17\xa1\xd1\xa0\x14\x13\x76\xc0\xb1\x1d\x0a\xa5\xae\x40\x28\xa1\xd8\x16\xc1\x06\x72\x8b\x90\x3a\x0d\x62\x42\xb9\xf8\x94\x63\x91\xee\xf2\xa8\x6b\x08\x10\xb5\x90\x52\xb3\x4c\x13\x93\x22\x64\xb4\x81\xe3\x91\xd7\xa9\x32\x91\xee\x8b\xcf\x80\x77\x9c\x33\x45\x38\x06\xc6\xc0\xc4\x14\x98\x98\x82\xa0\xe2\x18\x0d\x0f\x95\x6d\x5c\x84\x15\x64\x7b\x38\xe5\x09\x00\x0a\x2e\x62\x35\x60\x16\xe1\xa1\x89\x49\x30\xfe\x53\x34\x01\x26\x00\x6f\x3d\xae\x4c\x80\x89\xf7\x26\xe5\x77\x65\xe2\xfd\xbd\xc9\x3b\x98\x50\x26\x6a\x53\xf6\x84\x32\x59\xd3\xed\x09\x30\x59\x9b\x92\xeb\xc0\xc4\x59\x08\xb4\xae\xae\x0c\x8b\x1a\x36\x06\xc6\x99\x22\x1c\x9f\x80\xc0\x58\x28\xc2\xf1\x49\x08\x68\x11\x4e\x75\x09\x17\x38\x00\x69\xc8\x18\x75\x48\x35\x9e\x7c\xe1\x6b\x12\x49\x1a\x8a\x63\x52\x33\xad\x66\x18\xd7\xd1\x63\x10\xff\x41\xb8\x8b\xe9\x8e\x2c\x02\xa8\xc3\x9d\xc2\x1f\xb9\xdb\x17\x82\x17\x5a\xb5\x88\xc2\x1c\x77\x1a\x8c\xef\x71\xcf\xec\x03\x4e\x13\xd3\x8a\xed\xcc\x4f\x83\x00\x83\x7d\xb0\x77\xca\x50\x67\xbe\xcf\x8c\xb0\x95\xba\xa9\xe8\xc0\xa9\x54\x3c\xcc\xf8\xf3\xa4\x1c\xfd\x15\x87\xd6\x53\x83\x2c\x37\x18\x73\x48\xd4\xbc\xcc\x08\x28\x33\xa2\xb8\xd4\xaa\x23\xba\x00\xbc\x46\xb9\x6e\xb1\x93\x65\xd6\x63\x6f\xd9\x61\xcc\xa9\x87\x26\xc3\xd2\x31\xd4\xc4\x05\x2d\x50\x96\xd2\x2f\xd9\x86\x6c\x4c\x19\x10\xff\x2b\x5e\xc3\x30\xb0\xe7\xc5\x5a\x4d\xcb\x73\x6d\xb4\x30\x0d\x78\x8c\xef\xeb\x0e\x98\xc0\xf5\xc0\x32\x8b\x90\x62\xaf\x61\xb3\x43\x5e\x15\x96\xd6\x9f\x7d\xec\x7f\x79\xa7\x7d\xf9\x86\xff\xe1\xfd\x5e\x78\x62\x28\xfa\x58\xc3\xd3\xb6\x8d\x59\x77\x57\xb5\x3d\x5d\x02\x27\x4f\x72\x1c\x61\x69\xe6\xf0\xb1\xf6\xbd\x6b\xfe\x87\x0f\xfc\x3f\x5c\x2a\x68\xb5\x3d\x5d\xed\x7a\x35\x9f\x3c\xc9\x13\x1f\x4c\x19\xd0\x2d\xca\xe1\x50\xaa\xd4\x69\xb8\x40\x46\x54\x12\xb6\x51\x19\xdb\x32\xba\x5e\x5d\x99\x00\xfc\x41\xb4\x15\xd5\x3c\xed\x8a\x87\x8c\xf6\x5d\xb1\xe1\xd5\x95\xf1\xb1\x8c\x7e\x32\xcc\x32\x6a\xd8\x98\x03\xc9\xa3\x62\x11\x9e\x3a\x7a\xfa\xce\xd0\x05\x40\xc1\x22\x6e\x83\xf5\xea\x53\x44\x39\x04\x6c\xc1\xc5\x45\x48\x91\x69\x39\x30\x5c\x04\x67\x88\x77\x18\xd5\x31\x14\x30\x23\xdb\x12\x19\xb7\x89\xec\x06\x4e\x5e\x1d\x62\xd8\x96\x31\x17\x15\x1c\xe0\x2a\xb1\xf9\x2f\x0d\x92\x1f\x81\x60\x71\xd1\xaa\x00\x7c\x1a\x0c\xab\x33\x87\x8f\xa9\x5c\x17\x88\x1a\xb6\x5a\x46\x20\xba\xb8\x88\x89\xd9\x6a\xf5\x31\x3a\xe5\x6c\xc9\xe8\x60\xa4\xdc\x17\xb1\x29\xd9\x1a\x00\xd8\x2f\xaa\xf3\x9b\x77\x9e\x6d\x7e\x70\x75\xfd\xd1\xcd\x91\xec\x9e\xfa\xe1\x95\xca\x25\xaf\x33\x40\x26\xf1\x5c\xc7\x8c\x01\x8a\x5e\x63\x80\x82\x82\xad\x01\x0a\x1b\xee\x20\x40\xa1\xc6\x7e\x00\xcd\x88\xea\xfc\xc6\xc5\xa7\x1b\x2b\xab\x6f\x30\x40\x86\xed\x34\xcc\x8a\x8d\x28\x8e\x41\x92\x8b\x62\xa0\x92\xc2\xad\xc1\x92\x14\xec\x20\x60\x92\xd6\x7e\xa0\x1d\x88\x45\xde\x50\xb4\x6a\x0d\x34\x8f\x2d\xe1\x89\x18\xae\x54\x59\x8c\x97\x54\xba\x35\x60\xb2\x8a\x1d\x44\x4c\x56\xdb\x0f\xb2\xf7\x84\x8c\x00\x2e\xef\x5f\xbb\xbe\xbe\xf6\x68\x1b\x93\x2d\xab\xc6\xab\x23\xdb\x8e\x72\xd1\xc9\x1a\xb6\x5d\x98\x32\x9b\xe1\x33\x0c\xf0\xff\x94\x7a\x83\x61\x53\xec\x4d\x78\x93\x8c\x45\x32\x2b\x46\xb2\x7b\x7e\x99\xc5\x5b\xb8\x6c\x86\x78\xb3\x33\x71\xea\x9c\x35\x0f\x06\xee\xdc\x6a\x61\x9f\x9d\xd9\x89\xa5\x3d\x23\x38\x1d\xc2\xa8\x63\x4b\xb1\x18\x59\x17\x3e\x86\x31\xb8\xb8\x28\xa2\x69\x76\xa6\xd5\xca\x1a\xe0\xab\x71\xdc\x31\x6c\x50\xbe\x47\x0d\x9d\x17\xbc\x0e\xe8\xc0\x40\xf8\x55\x39\x51\xb6\x54\x7a\x4d\x3b\x33\x28\xdd\x9e\x43\x7b\x04\x77\x96\xec\xce\x1e\x79\x7f\xea\x95\x93\x5c\x01\xb7\xe5\x36\xa7\x4e\x62\x82\x82\xf3\x97\x34\xb8\xb0\xd4\xbe\xb3\xea\xdf\xf8\xdc\xbf\xb1\xda\xb9\xf5\x70\xe7\x30\x0d\x92\xb3\x48\x73\x65\xe7\x0c\xcc\xcc\xe2\x7c\x29\xc8\xdc\xb3\x89\xfd\x8f\x00\x3c\x65\x7a\x10\x12\xb3\x6e\x73\xea\xdd\xb0\x24\xc9\xcf\xbc\x54\x0d\x8a\x01\xdf\x5e\x6f\x9d\x99\x5f\xc5\x44\x13\xe6\x37\xe8\x00\x73\x6a\xe3\xfa\x37\xfe\xf2\xed\xd9\x23\xed\xdb\xdf\xfa\xdf\x2d\xbf\xc2\xbd\xc7\xce\x2d\xbe\x1c\x82\x9f\x63\x76\x7c\xc1\x0d\x17\xe0\x06\xb5\x8f\x72\x01\x5e\x11\x4f\x58\xe1\x0d\x81\x1b\xc1\x20\x80\x2d\x6c\x04\x20\xc1\x6c\x96\x30\x4c\x2b\xc8\xe8\x65\x43\xc9\x72\xdd\xa0\xf6\x01\xfe\x94\xcf\x71\xff\xe6\x46\xfa\x0d\x61\x90\x65\x37\x65\x63\x69\x73\xe9\xee\xc6\xb3\x0f\xda\xd7\x3f\xf3\x97\xff\x3b\x40\x64\x37\x69\xd0\x2e\xba\x5e\xf6\x64\x2f\x06\x29\x3f\xc7\x93\xe8\xe5\xc0\x90\xc5\x76\x0c\x95\x6c\xf3\x43\x78\x3a\x4f\x6e\xfa\xd7\x1e\x6c\x03\x1e\x39\x43\xc9\x93\x33\x6b\x01\xe2\x1d\x9f\xe0\x32\x71\x36\x12\x2d\xc4\x71\x9e\x89\x3d\x83\x5a\x65\x6c\x96\x17\x92\xba\x90\x35\x25\xcb\x93\xf0\xea\x89\xa3\x07\x33\x17\x27\xce\xb9\xb0\x8d\x8d\x3e\x8b\x60\xdc\xa9\xec\x90\x93\x41\x0b\xd9\xc2\xc3\x32\x56\x9c\x94\x09\x89\xec\xee\x62\x8a\xd7\x65\xf1\xeb\xcb\xf3\x84\xa1\xa6\x53\x47\x96\x74\x60\xdc\x37\x93\xce\x04\x82\x3b\x91\x42\xb9\x07\x10\xc5\x68\x0b\x70\x62\xd3\x12\x40\x66\xa2\x22\xea\xcc\x7b\x45\x38\xd9\x37\x62\xc2\xb6\x01\x06\xa5\xa1\xc5\x45\x05\x50\x44\xaa\x18\x0c\x5b\xa3\x60\xb8\x09\xa6\x8b\xe1\xbc\x0c\x35\xb6\x5a\x43\x8b\x8b\xc3\x4d\xf1\x47\x01\x98\x98\x40\x69\xb5\x32\xa3\x3f\x32\x7e\x90\x28\x48\x59\xf1\xfc\x48\x68\xaf\x2e\x6f\x3c\xb8\xba\xbe\xb6\xb4\xbe\xf6\x17\xff\xfe\x7d\xff\xc6\xb5\xed\xc7\xc6\xee\x33\x2f\xfd\xc5\x98\x57\xda\xe4\x1d\x8c\x63\xfd\xc7\xcb\xc3\xf4\x5e\x1e\xa6\x67\xf2\x30\xfd\xb5\xe4\x61\xfa\x3f\x12\x0f\xd3\xfb\xf1\x30\xbd\x3f\x0f\xd3\xb7\xc7\xc3\xf4\x1d\xe3\x61\xfa\x8f\x9a\x87\xe9\x5b\xf2\x30\x7d\x00\x1e\xf6\xe2\x60\x64\xf3\xb0\x6d\xa2\x92\x6d\xfe\xab\xe5\x61\x71\xfa\x11\x22\x89\x9f\x4f\xf4\xe5\x61\x7a\x3f\x1e\xa6\x6f\x93\x87\xe9\x5b\xf0\x30\xfd\x65\x79\x98\xfe\x63\xe1\x61\xfa\xeb\xcb\xc3\xf4\x0c\x1e\xa6\x0f\xc8\xc3\xf4\x41\x79\x98\xbe\x9b\x3c\x4c\x7f\xc3\x79\x98\x7f\xf1\x6f\xeb\x8f\x6f\x6f\x5e\xbc\xd6\x79\xb2\xf2\x3a\xf0\xb1\xc3\x0e\xdb\x6f\xdb\xce\xfc\xaf\x10\xd9\x1f\x7e\x3a\xdf\x2a\xa8\x3b\x9f\x9f\x6b\x7f\xf9\x67\xff\xe2\x17\x9d\x27\x37\x37\x56\x9e\x6d\xfe\x71\xe5\xb5\xa3\x6a\x19\xa3\x0a\xe6\x43\x46\x45\xc2\xdb\x7a\x2a\x07\x64\x6f\xa9\x18\xee\x51\x32\x48\x20\xfb\xcb\xab\x81\x57\xd7\x1f\x5f\x97\x1d\x3b\x0a\xfc\x7f\x7f\xba\xb9\x74\xc5\xbf\x71\xdd\x5f\xfe\xcb\xc6\xef\x9f\x04\xab\x8e\xff\xf5\x92\x7f\xff\x7e\xe7\xc9\xcd\xd9\x23\x11\x00\x2f\x11\xf6\x3b\x14\x41\x27\x3c\x4c\x89\xf8\xe0\xb4\x65\xe0\x7c\xf4\xd8\x7f\xf2\x87\xce\xad\x87\xed\xcb\xdf\x88\xb9\xfa\x0a\x0e\xcf\x13\xeb\x38\x38\xc9\x5b\xb2\x26\x46\x65\xad\x56\x56\x62\x8c\x6a\xa3\xa4\xf8\x5c\xec\xd3\xc2\xcf\x87\x5c\x7c\xb8\xba\xb4\xfe\xec\x41\xfb\xdc\xaa\xbf\x72\xc5\xbf\xf8\x70\x14\xf8\x8f\x1f\x6d\xac\xac\x6c\x3c\xfd\x4f\xff\xe2\x67\x3f\xe8\x2a\x77\x04\x79\xde\xbc\x43\xcd\x41\x31\xf5\x57\x2f\x75\xfe\xeb\xdc\x2e\x03\x1a\xe4\x06\x37\x36\x2d\x00\x38\x31\x95\x23\x90\xbc\x25\x00\x47\x65\xd9\x00\x47\xb5\x03\x01\x9c\x16\xfe\xa1\x01\xde\xe5\xa5\xea\x57\xb8\x5c\x73\x9c\xb9\xd7\x61\x95\x0a\x4d\x39\x71\xf4\xe0\xd6\x11\x79\xe2\xe8\xc1\x57\x92\x59\x64\x9b\x78\x6c\xc8\xef\x49\xf0\x25\xa5\xd9\xe1\x97\xd4\x0f\x14\x80\xdd\xe2\xcf\x0f\xc1\xec\x4d\xcf\x36\x6e\xaa\x96\x3a\xe7\xbf\xf5\x3f\x78\xec\x2f\x9f\xdf\x58\xfa\xbd\xbf\x72\xa7\x7d\xfb\xdb\xd0\xa2\x8d\xd5\xbf\xb6\xef\x5c\x2f\x68\xa8\x54\x28\x53\x2d\xbb\xe7\xf6\xad\xd5\xf6\xd5\x73\x9d\xbb\x17\xfc\xe5\x3b\x9b\x1f\x2c\xbf\xb5\x68\xb9\xcd\xa9\xfd\xa6\x49\x5b\xa3\x20\x78\x39\x2a\x6e\xe1\xc5\xaf\x11\xcf\x0c\xdf\x75\x59\x56\x4f\xcb\x46\x2c\x37\x9b\x7f\xfe\x80\xa9\x34\xf4\xcf\x51\x7c\xba\x81\x3d\xf6\x0e\x9f\x25\x5b\x86\xb0\x24\xfc\x6a\xb6\x0e\x59\x46\xa6\xa2\x3c\x55\xf3\x9c\x7d\x44\xaf\xb8\xbc\x9b\x50\x7b\xab\xb7\xbb\x65\xe8\xd7\xe1\x4b\x4c\x0c\x49\xc7\xfa\xda\xa3\xce\xff\x3c\xfa\xf9\xbb\xc7\x37\x56\xbf\x69\x7f\x7d\xfe\xef\xdf\x5d\x5d\x5f\xbb\x16\x14\x1e\xf9\xe5\xb1\xb0\xf4\xfb\xa5\xf3\x5d\x11\xed\xdf\xb8\xba\xbe\xf6\xe1\xae\x44\xe0\x20\xb9\x7e\x57\xee\xdc\x0e\x25\x1d\xca\x97\x7c\x53\xf6\x64\xdc\x14\x4e\xdd\x0e\x76\x13\x34\x08\x53\xe6\xc5\x05\x74\xc5\xe6\xff\x07\xa8\x94\x29\x46\x73\xd9\x37\x97\x85\x4d\xa2\x99\x67\x9d\xc5\xd3\x60\x7c\x32\x26\xf9\xb6\x53\x15\xbf\x0c\x70\x33\x6c\x92\xae\x4b\xf3\xb4\x20\x86\x51\x88\x7e\x42\xc0\x05\x86\xf3\x95\x06\x31\x98\xe5\x90\xfc\xc8\x62\xd8\x7e\x38\x0f\x55\xc9\x4b\x23\xaa\x43\xf2\x39\x71\xb4\x94\x1b\x8d\xa5\xf1\x08\x58\x8c\x47\x86\x55\x97\xe2\x26\x26\x6c\x06\x57\x50\xc3\x66\xf9\x91\x7d\x71\xdd\x70\x3e\xc7\xd7\xc4\xdc\x88\x8a\x88\x55\x47\x0c\xe7\x17\x81\x67\x50\xc7\xb6\x8f\xf3\x91\x8d\x81\xd6\x28\x98\x1c\x1b\x93\x5b\xa8\xe8\x14\x3a\x93\x5f\x94\x30\xad\x63\x56\x73\xcc\x69\x00\x79\xd8\xc1\x51\xa9\xa6\x41\xed\x69\x00\x35\x0f\x35\x71\xaa\xdc\x44\x0c\x4d\xf3\xce\x39\x5a\xb9\x11\xd5\xc3\xd4\x42\xb6\x75\x16\xe7\x47\x64\xb1\xf0\xa2\xf4\x34\x88\x06\x06\xf2\xc1\x15\x68\x79\x78\xe1\x30\x54\x71\xb7\x3a\x37\xa2\x1a\x9e\x97\x8f\xae\x54\xc3\x51\x00\xcb\xb6\x63\xcc\x41\x69\x04\xfc\x9f\x55\x89\x54\x81\x7f\x2a\x16\x01\x74\xe6\x60\xb7\xce\xb4\x56\x64\x9a\x07\x78\x78\xe4\x83\x9b\xdc\x8a\x89\x48\x15\x53\xd8\x7d\xa7\x6b\x38\x9f\x7b\x2b\xbe\xa5\x9d\x1b\x51\x6b\xac\x6e\x47\x36\xa7\x44\x5b\x00\xdb\x1e\xee\xe9\x52\xd3\x80\x33\xd7\x55\xe6\x61\x76\xdc\xaa\x63\xa7\xc1\x32\xc2\x61\x30\x1f\x88\x1f\x4f\x74\xb9\x00\x84\xd8\x8e\x75\x19\x36\x24\x0b\x48\x2f\x98\x52\x87\x26\x50\xe4\x4f\x9d\xfe\xf5\x7b\x47\xbb\x9d\x26\x0c\x08\xaa\x54\x8f\x21\xd6\xf0\x8e\xe3\x33\x2c\xd5\x73\xd2\x41\x2b\xea\x39\x7c\x08\xff\x34\x11\x05\x65\x5c\x71\x28\x16\xd7\xb1\x40\x11\x40\x18\xcc\xf0\x38\x0c\x7a\x6f\x40\xc7\x76\x98\x8e\xd1\xa8\x63\xc2\xd4\x2a\x66\xef\xda\x98\x3f\xbe\xb3\x30\x6b\xe6\xc3\xbb\x5d\x23\xaa\x69\x89\x9f\x67\x98\x45\x20\x7e\x9f\x11\x36\xe3\x01\x21\x75\x9a\xf8\x64\x4b\x7d\x01\x8d\x92\x2d\x1e\xda\xca\x14\xe9\x12\xdc\x88\x6a\x11\x82\xe9\x7b\xc7\x0f\x1d\xe4\x03\x0d\x76\xe3\xff\x8a\x17\xc0\xec\x0c\x1c\x40\x8d\x7c\x1d\xac\xaf\xaa\xf0\x26\xd6\x00\xea\x82\x65\xa9\x4b\x51\xc2\xc5\x72\x27\x05\x19\xcb\x05\x64\x2c\x17\x91\x31\x8a\xea\xaa\xe1\x10\xcf\xb1\xb1\x8a\x6c\x6b\xa1\x41\x04\x31\xab\x23\x82\xaa\x58\x43\x73\x3f\xf3\xdc\x7a\x71\xcf\xf8\x4f\x74\x75\x7c\x62\xef\xf8\xde\xb1\x9f\x4e\xaa\x04\x35\x15\xca\x73\xab\x6a\xa2\x39\x75\x6a\xef\xde\x9f\x8c\xeb\xe6\x58\xfd\x3d\x74\xa8\x5a\xcd\x95\xfc\xcb\x7f\xf2\x1f\x3f\x02\xf1\x08\x38\x63\x0b\xcc\x6f\x75\x05\x42\xef\x4d\xeb\x37\x24\x10\xb6\x0d\xff\x71\x67\x0e\x93\xdd\xc3\x3c\xc2\x3b\x00\x40\x35\x88\x86\x0c\xc3\x69\x10\xa6\x31\xde\x71\x84\xa1\xbf\x7a\x69\xf3\x3f\x3e\xeb\x8f\x5f\xf6\x05\xec\xad\x31\xec\xef\xb8\x68\xc8\xe9\x0c\x32\x18\x78\x2f\x1e\x39\x8c\x0e\xde\x2a\x8c\x0f\xf8\x7a\x03\x6b\x22\xaf\xa6\x26\xb0\x88\x99\xec\x52\xa7\x62\xd9\x58\x43\xae\xa5\x08\x78\xbd\x08\xdf\xf5\xc7\x9f\x76\xae\x5c\x55\x4a\x9d\xef\x6e\x6f\x3c\xbd\xe9\x5f\x7d\xe4\xdf\xbf\x0f\x66\x0e\x1f\xcb\xaf\x3f\x79\xd6\xb9\xf5\xb0\xfd\xf0\x41\xfb\xe3\x67\x23\xfd\xf1\xef\x73\xa1\xfb\x0d\x99\xc4\xe1\x01\xad\x48\xe7\xe6\x36\x61\x0f\xaa\x40\xa2\x72\xf7\xe7\xb6\x04\x8e\x08\x03\x0b\xd5\xb5\x9f\xd9\x8e\xf8\x1d\xef\xd9\x9a\x62\x90\xb7\xb4\xba\x45\x30\x9f\xf9\x41\x9e\xce\x95\xda\xb7\xbf\xf2\xff\xfc\x49\x70\xde\xdb\x67\xee\xf3\xe5\xdd\x0c\xae\xff\x83\x22\xc8\x2d\x2e\x26\x77\xf6\x5b\xad\x5c\x20\xe3\xcd\x5b\xcc\xa8\xe5\x43\xb1\x98\xec\x18\xc8\x4b\x7e\x35\x33\x2d\x51\x8f\xde\x65\x20\xae\x12\xb4\x3d\xe2\x1f\xad\x94\x22\xe9\xb7\x17\xb2\xb2\xec\x9c\x34\x88\x42\xf9\xa7\x01\xb2\xc6\x3e\x51\xde\x4f\x65\x04\x6c\x40\xd7\x65\x45\xbd\xbc\xe7\x79\x66\xb5\xc4\xd6\x22\xda\x50\x0c\x49\x5b\x8b\x78\xfe\x55\x31\x3b\xe8\x54\xbd\x78\xc6\x0d\xf3\x28\xca\x43\x4d\x6c\x5b\x46\x13\xb2\x17\x52\x58\x69\x13\xf2\x96\x10\xc9\x60\xb8\x82\xc5\x89\x41\xc4\xca\x87\x04\x89\x15\x1f\x5c\x9b\xc8\xce\x87\xe5\xa3\x60\x0f\xf8\x67\x30\x2e\x18\xa8\x64\xa6\x6c\x27\x8f\x15\x2b\xb9\x32\x19\xc5\x8b\x7c\xff\x91\xc7\x4c\x2c\xa8\xf7\x0a\xea\x69\x41\x9e\x19\x52\x1a\x39\xfb\x4f\x7d\xb9\x8f\x5c\xd1\xfb\x9d\x5e\x5c\xc1\x12\x94\x3f\xc5\xde\xe3\xdb\x15\x52\xfd\x50\xd2\x95\xfe\xb2\x5d\xe9\x5b\x74\xa5\x27\x5d\x69\x1a\x08\x0e\xbd\xe4\x9b\x18\x32\xce\x71\x43\x71\x50\x13\xa3\x9d\x87\x6f\xc1\xb7\x45\xd1\xdb\x30\xf3\x93\x79\xbf\xad\x44\x46\xf3\x06\xb5\x33\xc4\xc3\xdd\x57\x10\xd3\xdc\x23\xc1\xa9\x93\xf0\x45\xe0\x2e\x20\x07\x55\xfa\xaa\x63\x18\x5d\xd0\x7f\xf0\xbf\xfe\xa5\x8f\x3a\x77\x2f\x9c\x38\x7a\x70\xf3\xde\xd2\xc6\xb3\x5b\xfe\x9f\x3e\x09\x3e\x41\xcd\x1e\x79\x7f\xca\xbf\xf7\x95\xff\xf1\xd2\xf7\x4b\xe7\xfd\xcf\xcf\xff\xfd\xbb\xbb\x51\x1a\xe3\xab\x15\xd7\xa7\x5a\xae\xea\x95\x35\xcb\xfd\x7e\xe9\x5c\x54\x57\x5f\xb0\x5c\xd5\x72\x2d\x57\x25\x98\x49\xe5\xa6\x49\x3c\xd5\xa1\x68\x41\x24\x3c\xf1\x4d\xcd\x72\xc3\xe1\x76\x6d\xd9\x42\x73\xf5\x17\x35\x57\x7f\xbe\xb9\x7a\x96\xb9\x4d\x5d\x15\x16\xdb\x48\x3b\xe5\x39\x44\xaa\xf1\x5c\x8c\x4d\x95\xe0\x86\xae\x62\xb3\xc1\x79\x58\x15\xb3\xd9\x23\xaa\x5b\x8b\xcd\xee\x09\x12\xf9\x3e\x88\x1c\x24\xbd\x61\xf8\x9c\x68\xc9\x86\xbb\x6f\x74\x0c\x16\x5c\x51\xb4\x6c\x27\x58\x7a\xef\xbc\xcc\x1e\x89\x3e\x6a\xf8\xf7\x1e\xfa\x9f\xde\xf5\x57\x9e\xf8\x6b\x9f\x77\xee\x5e\xd8\xf8\x66\xb5\x73\xeb\x6b\xff\xa3\x87\xeb\x6b\x5f\x06\x84\xe5\x45\xa1\xce\xee\x6c\xf3\xf1\x9d\x8d\x95\x4f\x03\x8d\x9d\x2f\xbe\x08\xbe\xfd\x27\xd0\xe7\xd7\xd7\x96\x36\x2e\x7f\xb1\xbe\xf6\x68\xf3\xe3\x4f\xd6\xd7\xfe\xda\xfe\xe3\xdf\x3a\x77\x2f\xf0\xfa\x91\x18\xb3\x54\x36\x8e\xdd\x98\xba\xb6\xd2\x9b\x9e\x53\x06\x6f\xe5\x7b\x5c\x77\xd9\x42\xbc\x80\x58\x95\x8c\xa3\x15\x9e\x55\x83\xd2\x5f\x78\x0e\x01\x45\xf0\x8b\x63\xbf\x3c\xac\xba\x88\x7a\xb8\xe7\x50\xa3\xe2\x50\x90\x17\x69\xb8\x38\xb6\x0f\x58\x85\xa4\x9d\x6a\x63\x52\x65\xb5\x7d\xc0\x7a\xfb\xed\xf4\x79\xc1\x20\x66\x22\xd7\xc5\xc4\xcc\xa7\x4e\x19\x7e\x57\x70\x5c\x11\xb1\x01\x5b\xcb\x0d\x2f\x26\xbd\xfd\xc6\xfa\x6d\xc0\x25\x72\xe9\x13\xcb\x4c\x99\x7c\x77\xe9\x7e\xd3\xa4\xd8\xf3\x7e\x33\xf6\xdb\xd6\x48\xd7\xd1\x66\xd0\x65\xe9\x77\x52\xb1\x74\xae\x91\x9c\x6a\x68\x1a\xd8\x5c\xba\xb2\xbe\xf6\x65\x5c\xc2\x23\x19\xc6\xeb\x96\x8c\x61\xab\x05\x83\xf3\x27\xf8\xe2\x8e\xe1\x2b\x69\x5f\xad\x23\x3d\x86\xf5\x1c\x38\xf5\x4c\xe7\x74\x64\x17\x3c\x17\x91\xf0\xb4\x33\x67\x38\xb6\x43\xa7\x01\xc5\x66\xae\xd4\xfe\xbf\x07\xed\x7b\x57\xda\x57\x9e\xfa\x97\xbf\xf2\x97\x57\x79\x88\xdf\xbd\x10\xcc\x80\x82\xc6\x1b\x95\xe2\xde\x5b\x32\x21\x90\x99\x88\xc6\xfb\x28\xfd\x7f\x00\x00\x00\xff\xff\x02\xb9\xd1\x12\xb9\x46\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 18105, mode: os.FileMode(436), modTime: time.Unix(1728296858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

