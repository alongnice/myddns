// Code generated by go-bindata.
// sources:
// static/pages/writing.html
// DO NOT EDIT!

package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5b\xff\x73\x13\x47\x96\xff\xdd\x7f\x45\x5f\xe3\x2a\xc9\x17\xcf\x8c\x2d\x9b\x59\xd6\x48\xda\x22\x38\xb7\x78\x0f\x58\x8a\x2f\xb9\xbd\xda\xda\x62\x5b\x33\x2d\x69\xf0\xa8\x67\xe8\x69\xc9\x08\x97\xaa\x1c\x0e\x08\xa4\x20\x90\x3b\x96\x25\x2c\x09\xc7\x5d\x92\xe2\xee\x12\x3b\x7b\xb5\xb5\x71\x20\x84\x3f\x26\x1e\xd9\xfe\x69\xff\x85\xab\xee\xf9\xd6\x23\x8d\xb0\xc0\x5f\x42\x38\x7e\xb0\x66\xba\x5f\xbf\x7e\xf3\x3e\xaf\x5f\x7f\xa6\xe7\x51\xac\xb3\x86\x0d\x6c\x44\x6a\x25\x78\xb1\x0e\xcb\x23\x23\xc5\x3a\x46\x66\x79\x04\x80\x62\x03\x33\x04\x8c\x3a\xa2\x1e\x66\x25\xd8\x64\x55\xe5\x00\x4c\x3a\xea\x8c\xb9\x0a\x3e\xdf\xb4\x5a\x25\xf8\x1b\xe5\xcc\x21\xe5\xb0\xd3\x70\x11\xb3\x2a\x36\x86\xc0\x70\x08\xc3\x84\x95\xe0\xdc\x3b\x25\x6c\xd6\xb0\x34\x8e\xa0\x06\x2e\xc1\x96\x85\x17\x5c\x87\x32\x49\x74\xc1\x32\x59\xbd\x64\xe2\x96\x65\x60\x45\xdc\x8c\x03\x8b\x58\xcc\x42\xb6\xe2\x19\xc8\xc6\xa5\xc9\x3e\x35\xa8\xc9\xea\x0e\x95\x94\x9c\xb3\xc2\xb9\x98\xc5\x6c\x5c\x3e\xf6\xcf\xb3\xb3\xc7\x4f\x15\xb5\xe0\x8e\xb7\xdb\x16\x99\x07\x14\xdb\x25\xe8\xb1\xb6\x8d\xbd\x3a\xc6\x0c\x82\x3a\xc5\xd5\x12\xd4\x3c\x86\x98\x65\x68\x15\xc7\x61\x1e\xa3\xc8\x55\x1b\x16\x51\x0d\xcf\x83\x43\x0f\x35\x9c\x46\xc3\x91\xc6\x78\x06\xb5\x5c\x06\x3c\x6a\x24\x32\xe7\xce\x37\x31\x6d\x2b\x53\xea\x7e\x75\x52\xcc\x70\xce\x83\xe5\xa2\x16\x88\x96\x47\x8a\x5a\x80\xc0\x48\xb1\xe2\x98\x6d\xa1\x85\x37\x60\xca\x2f\x01\x28\x9a\x56\x0b\x18\x36\xf2\xbc\x12\x24\xa8\x55\x41\x14\x04\x3f\x8a\x89\xe8\x3c\xa8\xd4\x82\x5f\xaf\x8e\x4c\x67\x41\xf1\x1a\x30\x18\x96\x1e\xc8\xfd\x85\x2c\x82\x29\x30\x95\xaa\x8d\x2f\x80\x73\x4d\x8f\x59\xd5\xb6\x12\x3a\x52\xa9\x60\xb6\x80\x31\x89\x07\x03\x50\x44\x80\x21\x5a\xe3\xa1\x50\xb1\x11\x99\x8f\x9e\x9c\xc7\x81\x37\xa3\x69\x35\x8b\xd5\x9b\x15\xd5\x70\x1a\x1a\xb2\x1d\x52\x23\x96\x81\xb5\x46\xdb\x34\x89\x07\xd3\xf6\x2a\x15\x8a\x88\x19\xcd\x8c\x6c\xab\x46\x14\x8b\xe1\x86\xa7\x18\x98\x30\x4c\xa5\x49\xb9\x07\x5b\x35\x70\xa1\x61\x13\x2f\x98\x6a\x46\xd3\x16\x16\x16\xd4\x85\x29\xd5\xa1\x35\xad\x30\x31\x31\xa1\x79\xad\x1a\x04\x41\xf4\xc0\xc2\x04\x04\x75\x6c\xd5\xea\x2c\xb8\xae\x5a\xb6\x5d\x82\xc4\x21\x18\x02\x8f\x51\x67\x1e\x97\xa0\xd1\xa4\x14\x13\x76\xd8\xb1\x1d\x0a\xa5\xa9\x40\x28\xa1\xd8\x16\xc1\x06\x72\x4b\x90\x3a\x4d\x62\x42\xb9\xf9\x9c\x63\x91\xde\xf6\x68\x6a\x08\x10\xb5\x90\x52\xb7\x4c\x13\x93\x12\x64\xb4\x89\xe3\x27\x6f\x50\xa5\x90\x9e\x8b\xaf\x80\xb7\x9d\x0b\x25\x38\x01\x26\x40\x61\x1a\x14\xa6\x21\xa8\x3a\x46\xd3\x43\x15\x1b\x97\x60\x15\xd9\x1e\x4e\x79\x02\x80\xa2\x8b\x58\x1d\x98\x25\x78\xac\x30\x05\x26\x7f\x8e\x0a\xa0\x00\xf8\xe8\x49\xa5\x00\x0a\x47\xa6\xe4\x7b\xa5\xf0\xee\x81\xe4\x1e\x14\x94\x42\x7d\xda\x2e\x28\x53\x75\xdd\x2e\x80\xa9\xfa\xb4\xdc\x07\x0a\x17\x21\xd0\x7a\xa6\x32\x2c\x6a\xd8\x18\x18\x17\x4a\x70\xb2\x00\x81\xd1\x2e\xc1\xc9\x29\x08\x68\x09\x4e\xf7\x08\x17\x39\x00\x69\xc8\x18\x75\x48\x2d\x5e\x7c\xe1\x6d\x12\x49\x1a\x8a\x63\x52\x33\xad\x56\x18\xd7\xd1\x65\x10\xff\x41\xb8\x8b\xe5\x8e\x2c\x02\xa8\xc3\x9d\xc2\x2f\xb9\xdb\xdb\xc1\x0d\xad\x59\x44\x61\x8e\x3b\x03\x26\xf7\xbb\x17\x0e\x02\xa7\x85\x69\xd5\x76\x16\x66\x40\x80\xc1\x41\xd8\xbf\x64\xa8\xb3\x30\x60\x45\xd8\x4a\xc3\x54\x74\xe0\x54\xab\x1e\x66\xfc\x7a\x4a\x8e\xfe\xaa\x43\x1b\xa9\x87\xac\x34\x19\x73\x48\x34\xbc\xc2\x08\xa8\x30\xa2\xb8\xd4\x6a\x20\xda\x06\x5e\xb3\xd2\xb0\xd8\xd9\x0a\xeb\xb3\xb7\xe2\x30\xe6\x34\x42\x93\x61\xf9\x14\x6a\xe1\xa2\x16\x28\x4b\xe9\x97\x6c\x43\x36\xa6\x0c\x88\xbf\x8a\xd7\x34\x0c\xec\x79\xb1\x56\xd3\xf2\x5c\x1b\xb5\x67\x00\x8f\xf1\x83\xbd\x01\x13\xb8\x1e\x58\x66\x09\x52\xec\x35\x6d\x76\xcc\xab\xc1\xf2\xda\xf3\x4f\xfc\xaf\xee\x75\xaf\xdd\xf6\x3f\x78\xd8\x0f\x4f\x0c\xc5\x00\x6b\x78\xda\xb6\x31\xeb\x9d\xaa\xbe\xbf\x47\xe0\xec\x59\x8e\x23\x2c\xcf\x1e\x3f\xd5\x7d\x70\xd3\xff\xe0\x91\xff\x87\xab\x45\xad\xbe\xbf\x67\x5c\xbf\xe6\xb3\x67\x79\xe2\x83\x29\x03\x7a\x45\x39\x1c\x4a\x8d\x3a\x4d\x17\xc8\x88\x4a\xc2\x36\xaa\x60\x5b\x46\xd7\x6b\x28\x05\xc0\x2f\xc4\x58\xd1\xcd\xd3\xae\xb8\xc8\x18\xdf\x13\x1b\x5e\x43\x99\x9c\xc8\x98\x27\xc3\x2c\xa3\x8e\x8d\x79\x90\x5c\x2a\x16\xe1\xa9\xa3\x6f\xee\x0c\x5d\x00\x14\x2d\xe2\x36\x59\xbf\x3e\x45\xb4\x43\xc0\xda\x2e\x2e\x41\x8a\x4c\xcb\x81\xe1\x26\x38\x4b\xbc\xe3\xa8\x81\xa1\x80\x19\xd9\x96\xc8\xb8\x2d\x64\x37\x71\x72\xeb\x10\xc3\xb6\x8c\xf9\xa8\xe1\x30\x57\x89\xcd\x7f\x68\x92\xfc\x18\x04\x8b\x8b\x56\x15\xe0\xf3\x60\x54\x9d\x3d\x7e\x4a\xe5\xba\x40\x34\xb0\xd3\x31\x02\xd1\xc5\x45\x4c\xcc\x4e\x67\x80\xd1\x29\x67\x4b\x46\x07\x4f\xca\x7d\x11\x9b\x92\xad\x01\x80\x43\xa2\x3b\xbf\x79\xef\xf9\xe6\xfb\x37\xd6\x9e\x7c\x34\x96\x3d\xd3\x20\xbc\x52\xb9\xe4\x75\x06\xc8\x24\x9e\xeb\x98\x31\x40\xd1\x6d\x0c\x50\xd0\xb0\x35\x40\xe1\xc0\x1d\x04\x28\xd4\x38\x08\xa0\x59\xd1\x9d\xdf\xb8\xf2\xfd\xc6\xf2\xca\x1b\x0c\x90\x61\x3b\x4d\xb3\x6a\x23\x8a\x63\x90\xe4\xa6\x18\xa8\xa4\x71\x6b\xb0\x24\x05\x3b\x08\x98\xa4\x75\x10\x68\x87\x63\x91\x37\x14\xad\x7a\x13\x2d\x60\x4b\x78\x22\x86\x2b\xd5\x16\xe3\x25\xb5\x6e\x0d\x98\xac\x62\x07\x11\x93\xd5\x0e\x82\xec\x88\x90\x11\xc0\xe5\xfd\x9b\x1f\xae\xad\x3e\xd9\xc6\x62\xcb\xea\xf1\x1a\xc8\xb6\xa3\x5c\x74\xb6\x8e\x6d\x17\xa6\xcc\x66\xf8\x02\x03\xfc\x8f\xd2\x68\x32\x6c\x8a\x77\x13\x3e\x24\x63\x93\xcc\x8a\x91\xec\x99\x5f\x65\xf3\x16\x2e\x9b\x25\xde\xdc\x6c\x9c\x3a\xe7\xcc\xa3\x81\x3b\xb7\xda\xd8\xe7\x66\x77\x62\x6b\xcf\x08\x4e\x87\x30\xea\xd8\x52\x2c\x46\xd6\x85\x97\x61\x0c\x2e\x2e\x8a\x68\x9a\x9b\xed\x74\xb2\x1e\x70\x6f\x1c\x77\x0a\x1b\x94\xbf\xa3\x86\xce\x0b\x6e\x87\x74\x60\x20\xbc\x57\x4e\x94\x2d\x95\x6e\xd3\xce\x0c\x5a\xb7\xe7\xd0\x3e\xc1\x9d\x25\xbb\x73\x27\xde\x9d\xde\x73\x92\x2b\xe0\xb6\xdc\xd6\xf4\x59\x4c\x50\x70\xfe\x92\x06\x17\x96\xbb\xf7\x56\xfc\xdb\x5f\xf8\xb7\x57\xd6\xef\x3c\xde\x39\x4c\x83\xe4\x2c\xd2\x5c\xc5\xb9\x00\x33\xb3\x38\xdf\x0a\x32\xdf\xd9\xc4\xfb\x8f\x00\x3c\x65\x7a\x10\x12\x73\x6e\x6b\xfa\x9d\xb0\x25\xc9\xcf\xbc\x55\x0d\x9a\x01\x7f\xbd\xde\x3a\x33\xef\xc5\x42\x13\xe6\x37\xe9\x10\x6b\x6a\xe3\xc3\x6f\xfc\x5b\x77\xe7\x4e\x74\xef\x7e\xeb\x7f\x77\x6b\x0f\xdf\x3d\x76\x6e\xf3\xe5\x10\xfc\x12\xb3\xd3\x6d\x37\xdc\x80\x9b\xd4\x3e\xc9\x05\x78\x47\xbc\x60\x85\x37\x04\x6e\x04\x83\x00\xb6\x70\x10\x80\x04\xb3\x39\xc2\x30\xad\x22\xa3\x9f\x0d\x25\xdb\x75\x93\xda\x87\xf9\x55\x3e\xc7\xfd\x9b\x1b\x1b\xf4\x08\xc3\x6c\xbb\x29\x1b\xcb\x9b\x4b\xf7\x37\x9e\xbf\xdf\xfd\xf0\x73\xff\xd6\x7f\x06\x88\xec\x26\x0d\xda\x45\xd7\xcb\x9e\xec\xc7\x20\xe5\xe7\x78\x11\xbd\x1a\x18\xb2\xd8\x8e\xa1\x92\x6d\x7e\x08\xcf\xfa\xb3\x8f\xfc\x9b\x8f\xb6\x01\x8f\x9c\xa1\xe4\xc5\x99\xb5\x01\xf1\x89\xcf\x70\x99\x38\x1b\x89\x11\xe2\x38\xcf\xc4\x9e\x41\xad\x0a\x36\x2b\xed\xa4\x2f\x64\x4d\xc9\xf6\x24\xbc\x7a\xe6\xe4\xd1\xcc\xcd\x89\x73\x2e\x6c\x63\x63\xc0\x26\x18\x4f\x2a\x3b\xe4\x6c\x30\x42\xb6\xf0\xb8\x8c\x15\x27\x65\x42\x22\x7b\xba\x98\xe2\xf5\x58\xfc\xfa\xf2\x3c\x61\xa8\xe9\x34\x90\x25\x1d\x18\x0f\xcc\xa4\xb3\x81\xe0\x4e\xa4\x50\xee\x01\x44\x31\xda\x02\x9c\xd8\xb4\x04\x90\xd9\xa8\x89\x3a\x0b\x5e\x09\x4e\x0d\x8c\x98\x70\x6c\x80\x41\x79\x64\x71\x51\x01\x14\x91\x1a\x06\xa3\xd6\x38\x18\x6d\x81\x99\x52\xb8\x2e\x43\x8d\x9d\xce\xc8\xe2\xe2\x68\x4b\xfc\x28\x00\x13\x13\x28\x9d\x4e\x66\xf4\x47\xc6\x0f\x13\x05\x29\x2b\x5e\x1c\x09\xdd\x95\x5b\x1b\x8f\x6e\xac\xad\x2e\xad\xad\xfe\xb7\xff\xf0\xa1\x7f\xfb\xe6\xf6\x63\x63\xf7\x99\x97\xfe\x72\xcc\x2b\x6d\xf2\x0e\xc6\xb1\xfe\xd3\xe5\x61\x7a\x3f\x0f\xd3\x33\x79\x98\xfe\x5a\xf2\x30\xfd\xff\x13\x0f\xd3\x07\xf1\x30\x7d\x30\x0f\xd3\xb7\xc7\xc3\xf4\x1d\xe3\x61\xfa\x4f\x9a\x87\xe9\x5b\xf2\x30\x7d\x08\x1e\xf6\xf2\x60\x64\xf3\xb0\x6d\xa2\x92\x6d\xfe\xde\xf2\xb0\x38\xfd\x08\x91\xc4\xcf\x67\x06\xf2\x30\x7d\x10\x0f\xd3\xb7\xc9\xc3\xf4\x2d\x78\x98\xfe\xaa\x3c\x4c\xff\xa9\xf0\x30\xfd\xf5\xe5\x61\x7a\x06\x0f\xd3\x87\xe4\x61\xfa\xb0\x3c\x4c\xdf\x4d\x1e\xa6\xbf\xe1\x3c\xcc\xbf\xf2\xd7\xb5\xa7\x77\x37\xaf\xdc\x5c\x7f\xb6\xfc\x3a\xf0\xb1\x33\x1e\xa6\x44\x7c\x2e\xd8\x2a\x96\xd7\x3f\x7e\xea\x3f\xfb\xc3\xfa\x9d\xc7\xdd\x6b\xdf\x08\x4f\xef\xc1\xd1\x67\x62\x1d\x0f\x8f\xe4\x2e\xc9\x68\x51\x5b\xa7\x93\x15\xd6\x51\x6f\x14\xd2\x19\x36\x24\xd1\x97\x16\x7e\x71\xe4\x89\xcf\x0e\x57\xd7\x9e\x3f\xea\xbe\xb7\xe2\x2f\x5f\xf7\xaf\x3c\x1e\x07\xfe\xd3\x27\x1b\xcb\xcb\x1b\xdf\xff\x9b\x7f\xe5\xf3\x1f\x35\x47\x9d\x40\x9e\xb7\xe0\x50\x73\x58\x4c\xfd\x95\xab\xeb\xff\xfe\xde\x2e\x03\x1a\x6c\x71\x6e\x6c\x5a\x00\x70\x62\x2a\x47\x20\xb9\x4b\x00\x8e\xda\xb2\x01\x8e\x7a\x87\x02\x38\x2d\xfc\x63\x03\xbc\xcb\x89\xe6\x9f\x70\xa5\xee\x38\xf3\xaf\x43\x8e\x09\x4d\x39\x73\xf2\xe8\xd6\x11\x79\xe6\xe4\xd1\x3d\xc9\x2c\xb2\x4d\x3c\x36\xe4\xfb\x24\xf8\x92\xd6\xec\xf0\x4b\xfa\x87\x0a\xc0\x5e\xf1\x17\x87\x60\x36\x65\x1d\xbe\xce\xf0\x1c\xc6\x9e\xd7\x2e\x68\xa6\x49\x3c\xa5\xe6\xec\x5b\x08\x66\x87\xe5\xf5\x4b\xdf\xfa\xef\x3f\xf5\x6f\x5d\xda\x58\xfa\x17\x7f\xf9\x5e\xf7\xee\xb7\xa1\x61\x1b\x2b\x7f\xe9\xde\xfb\xb0\xa8\xa1\x72\xb1\x42\xb5\x6c\x03\xba\x77\x56\xba\x37\xde\x5b\xbf\x7f\xd9\xbf\x75\x6f\xf3\xfd\x5b\xfb\x16\x2d\xb7\x35\x7d\xc8\x34\x69\x67\x1c\x04\x37\x27\x45\x29\x55\x7c\x1b\x91\x85\xf0\x5e\x97\x65\xf5\xb4\x6c\x44\x55\xb2\x49\xc4\x8f\x98\x51\x43\xff\x9c\xc4\xe7\x9b\xd8\x63\x6f\xf3\xc5\xb2\x65\x24\x4b\xc2\x7b\xc3\xff\xb2\x8c\x4c\x05\x7b\xaa\xe7\x05\x64\xb0\x5f\x5c\xa6\x84\x6a\x7f\xf7\x76\x79\xdf\xa0\x09\x5f\x61\x7d\x48\x3a\xd6\x56\x9f\xac\xff\xd7\x93\x5f\xbe\x73\x7a\x63\xe5\x9b\xee\x9f\x2f\xfd\xed\xbb\x1b\x6b\xab\x37\x83\xc6\x13\xbf\x3e\x15\xb6\xfe\xb0\x74\xa9\x27\xa2\xfd\xdb\x37\xd6\x56\x3f\xd8\x95\x08\x1c\x26\xe5\xef\x4a\xe1\xe4\x48\x32\xa1\x5c\xa9\x99\xb2\x27\xa3\xdc\x33\x55\xe2\xe9\x26\x68\x10\xa6\x2c\x88\x2a\x62\xc5\xe6\x7f\x03\x54\x2a\x14\xa3\xf9\xec\xf2\x53\x61\x93\x18\xe6\x59\x17\xf1\x0c\x98\x9c\x8a\x0f\xd5\x6c\xa7\x26\xca\xbb\xdd\x0c\x9b\xa4\x9a\x57\x9e\x16\xc4\x63\x14\xa3\x3a\x70\x2e\x30\x9a\xaf\x36\x89\xc1\x2c\x87\xe4\xc7\x16\xc3\xf1\xa3\x79\xa8\x4a\x5e\x1a\x53\x1d\x92\xcf\x89\xf3\x81\xdc\x78\x2c\x8d\xc7\xc0\x62\xfc\x64\x58\x75\x29\x6e\x61\xc2\x66\x71\x15\x35\x6d\x96\x1f\x3b\x18\xf7\x8d\xe6\x73\x7c\x6b\xcc\x8d\xa9\x88\x58\x0d\xc4\x70\x7e\x11\x78\x06\x75\x6c\xfb\x34\x7f\xb2\x09\xd0\x19\x07\x53\x13\x13\xf2\x08\x15\x9d\x43\x17\xf2\x8b\x12\xa6\x0d\xcc\xea\x8e\x39\x03\x20\x0f\x3b\x38\x2e\xf5\x34\xa9\x3d\x03\xa0\xe6\xa1\x16\x4e\xb5\x9b\x88\xa1\x19\x3e\x39\x47\x2b\x37\xa6\x7a\x98\x5a\xc8\xb6\x2e\xe2\xfc\x98\x2c\x16\x56\xbb\xce\x80\xe8\xc1\x40\x3e\xa8\x63\x95\x1f\x2f\x7c\x0c\x55\x14\xc8\xe6\xc6\x54\xc3\xf3\xf2\x51\x5d\x2c\x1c\x07\xb0\x62\x3b\xc6\x3c\x94\x9e\x80\xff\xb3\xaa\x91\x2a\xf0\x77\xa5\x12\x80\xce\x3c\xec\xd5\x99\xd6\x8a\x4c\xf3\x30\x0f\x8f\x7c\x50\x8e\xab\x98\xfc\xc5\x91\xc2\xde\xc2\x9c\xd1\x7c\x6e\x5f\x5c\x6a\x9b\x1b\x53\xeb\xac\x61\x47\x36\xa7\x44\x3b\x00\xdb\x1e\xee\x9b\x52\xd3\x80\x33\xdf\xd3\xe6\x61\x76\xda\x6a\x60\xa7\xc9\x32\xc2\x61\x38\x1f\x88\x0a\xf8\x1e\x17\x80\x10\xdb\x89\x1e\xc3\x46\x64\x01\xe9\x06\x53\xea\xd0\x04\x8a\xfc\xb9\xf3\xbf\x39\x72\xb2\xd7\x69\xc2\x80\xa0\x4b\xf5\x18\x62\x4d\xef\x34\xbe\xc0\x52\x33\x27\x13\x74\xa2\x99\xc3\x8b\xf0\xa7\x85\x28\xa8\xe0\xaa\x43\xb1\xa8\xa9\x01\x25\x00\x61\xb0\xc2\xe3\x30\xe8\x2f\x63\x8d\xed\x30\x1d\xa3\xd9\xc0\x84\xa9\x35\xcc\xde\xb1\x31\xbf\x7c\xbb\x3d\x67\xe6\xc3\x02\x9d\x31\xd5\xb4\x44\x8d\xbd\x59\x02\xa2\xc8\x3e\x1c\xc6\x03\x42\x9a\x34\xf1\xc9\x96\xfa\x02\x36\x25\x5b\x3c\xb2\x95\x29\x52\x25\xd3\x98\x6a\x11\x82\xe9\x91\xd3\xc7\x8e\xf2\x07\x3d\x24\x02\xfe\x1f\x71\x1b\xcc\xcd\xc2\x21\xd4\xc8\x35\x3d\x03\x55\x85\xe5\x34\x43\xa8\x0b\xb6\xa5\x1e\x45\x09\x25\xcb\x9d\x15\x9c\x2c\x17\x70\xb2\x5c\xc4\xc9\x28\x6a\xa8\x86\x43\x3c\xc7\xc6\x2a\xb2\xad\x76\x93\x08\x7e\xd6\x40\x04\xd5\xb0\x86\xe6\x7f\xe1\xb9\x8d\xd2\xfe\xc9\x9f\xe9\xea\x64\xe1\xc0\xe4\x81\x89\x9f\x4f\xa9\x04\xb5\x14\xca\x73\xab\x6a\xa2\x79\x75\xfa\xc0\x81\x9f\x4d\xea\xe6\x44\xe3\x08\x3a\x56\xab\xe5\xca\xfe\xb5\x3f\xf9\x4f\x9f\x80\xf8\x09\x38\x63\x0b\xcc\xef\xf4\x04\x42\x7f\xb9\xec\x1b\x12\x08\xdb\x86\xff\xb4\x33\x8f\xc9\xee\x61\x1e\xe1\x1d\x00\xa0\x1a\x44\x43\x86\xe1\x34\x09\xd3\x18\x9f\x38\xc2\xd0\x5f\xb9\xba\xf9\xaf\x9f\x0f\xc6\x2f\xbb\x8a\x76\x6b\x0c\x07\x3b\x2e\x7a\xe4\x74\x06\x19\x0e\xbc\x97\x8f\x1c\x46\x87\x1f\x15\xc6\x07\x7c\xbd\x81\x35\x91\x57\x57\x13\x58\xc4\x4a\x76\xa9\x53\xb5\x6c\xac\x21\xd7\x52\x04\xbc\x5e\x84\xef\xda\xd3\xcf\xd6\xaf\xdf\x50\xca\xeb\xdf\xdd\xdd\xf8\xfe\x23\xff\xc6\x13\xff\xe1\x43\x30\x7b\xfc\x54\x7e\xed\xd9\xf3\xf5\x3b\x8f\xbb\x8f\x1f\x75\x3f\x79\x3e\x36\x18\xff\x01\x55\xb9\x6f\xc8\x22\x0e\x12\x18\x10\xe9\xdc\xdc\x26\xec\x41\x17\x48\x54\xee\xfe\xda\x96\xc0\x11\x61\x60\xa1\x86\xf6\x0b\xdb\x11\xff\x19\xf3\x62\x5d\x31\xc8\x3e\xad\x61\x11\xcc\x57\x7e\x90\xa7\x73\xe5\xee\xdd\xaf\xfd\xff\xf8\x74\x63\xf9\xf9\xe6\x1f\x97\x07\xac\x7d\xbe\xbd\x9b\x41\x0d\x37\x28\x81\xdc\xe2\x62\x52\x78\xdd\xe9\xe4\x02\x19\x6f\xc1\x62\x46\x3d\x1f\x8a\xc5\x64\xc7\x40\x5e\xf2\x5f\x1f\x66\x24\xea\xd1\xbf\x0d\xc4\x5d\x82\xb6\x47\xfc\xa3\x93\x52\x24\x15\xd0\xcb\xca\xb2\x73\xd2\x30\x0a\xe5\xfa\x6e\x59\xe3\x80\x28\x1f\xa4\x32\x02\x36\xa0\xeb\xb2\xa2\x7e\xde\xf3\x22\xb3\x3a\xe2\xd5\x22\x7a\xa1\x18\x91\x5e\x2d\xe2\xf5\x57\xc3\xec\xa8\x53\xf3\xe2\x15\x37\xca\xa3\x28\x0f\x35\xf1\xda\x32\x9e\x90\xbd\x90\xc2\x4a\x2f\x21\xfb\x84\x48\x06\xc3\x15\x2c\x4e\x3c\x44\xac\x7c\x44\x90\x58\xf1\xd5\xac\x85\xec\x7c\xd8\x3e\x0e\xf6\x83\xbf\x07\x93\x82\x81\x4a\x66\xca\x76\xf2\x58\xb1\x92\xba\xb7\x28\x5e\xe4\x22\x36\x1e\x33\xb1\xa0\xde\x2f\xa8\xa7\x05\x79\x66\x48\x69\xe4\xec\x3f\xf5\xf9\x35\x72\x45\xff\xc7\x56\x51\x47\x23\x28\x7f\x8a\xbd\xc7\x9f\xc8\xa5\xfe\x91\x64\x2a\xfd\x55\xa7\xd2\xb7\x98\x4a\x4f\xa6\xd2\x34\x10\x1c\x7a\xc9\x9f\xd3\x65\x9c\xe3\x81\xe2\xa0\x26\x46\x3b\x0f\xf7\xc1\xb7\x44\xd3\x5b\x30\xf3\xbb\xe7\xa0\x57\x89\x8c\xe1\x4d\x6a\x67\x88\x87\x6f\x5f\x41\x4c\x73\x8f\x04\xa7\x4e\xc2\x17\x81\xbb\x80\x1c\x54\xe9\x7a\xb5\x30\xba\xa0\xff\xe8\x7f\xfc\xab\x1f\xaf\xdf\xbf\x7c\xe6\xe4\xd1\xcd\x07\x4b\x1b\xcf\xef\xf8\x7f\xfa\xd4\xbf\xf2\xe5\xfa\xb3\x8f\xe6\x4e\xbc\x3b\xed\x3f\xf8\xda\xff\x64\xe9\x87\xa5\x4b\xfe\x17\x97\xfe\xf6\xdd\xfd\x28\x8d\xf1\xdd\x8a\xeb\x53\x2d\x57\xf5\x2a\x9a\xe5\xfe\xb0\xf4\x5e\xd4\xd7\x68\x5b\xae\x6a\xb9\x96\xab\x12\xcc\xa4\x76\xd3\x24\x9e\xea\x50\xd4\x16\x09\x4f\x7c\x2c\xb7\xdc\xf0\x71\x7b\x5e\xd9\x42\x73\xf5\x97\x35\x57\x7f\xb1\xb9\x7a\x96\xb9\x2d\x5d\x15\x16\xdb\x48\x3b\xe7\x39\x44\xea\xf1\x5c\x8c\x4d\x95\xe0\xa6\xae\x62\xb3\xc9\x79\x58\x0d\xb3\xb9\x13\xaa\x5b\x8f\xcd\xee\x0b\x12\xf9\xa3\xbe\x1c\x24\xfd\x61\xf8\x82\x68\xc9\x86\x7b\x60\x74\x0c\x17\x5c\x51\xb4\x6c\x27\x58\xfa\x0b\x17\xe6\x4e\x44\xdf\x36\xfc\x07\x8f\xfd\xcf\xee\xfb\xcb\xcf\xfc\xd5\x2f\xd6\xef\x5f\xde\xf8\x66\x65\xfd\xce\x9f\xfd\x8f\x1f\xaf\xad\x7e\x15\x10\x96\x97\x85\x3a\x7b\xb2\xcd\xa7\xf7\x36\x96\x3f\x0b\x34\xae\x7f\xf9\x65\xf0\x01\x37\x81\x3e\xbf\xb6\xba\xb4\x71\xed\xcb\xb5\xd5\x27\x9b\x9f\x7c\xba\xb6\xfa\x97\xee\x1f\xff\xba\x7e\xff\x32\xef\x1f\x8b\x31\x4b\x65\xe3\xd8\x8d\xa9\xda\x83\xfe\xf4\x9c\x32\x78\x2b\xdf\xe3\x86\xcb\xda\xf1\x06\x62\x55\x33\x8e\x56\x78\x56\x0d\x5a\x7f\xe5\x39\x04\x94\xc0\xaf\x4e\xfd\xfa\xb8\xea\x22\xea\xe1\xbe\x43\x8d\xaa\x43\x41\x5e\xa4\xe1\xd2\xc4\x41\x60\x15\x93\x71\xaa\x8d\x49\x8d\xd5\x0f\x02\xeb\xad\xb7\xd2\xe7\x05\xc3\x98\x89\x5c\x17\x13\x33\x9f\x3a\x65\xf8\x7d\xd1\x71\x45\xc4\x06\x6c\x2d\x37\xba\x98\xcc\xf6\x5b\xeb\x77\x01\x97\xc8\xa5\x4f\x2c\x33\x65\xf2\xbd\xad\x87\x4c\x93\x62\xcf\xfb\xed\xc4\xef\x3a\x63\x3d\x47\x9b\xc1\x94\xe5\xdf\x4b\xcd\xd2\xb9\x46\x72\xaa\xa1\x69\x60\x73\xe9\xfa\xda\xea\x57\x71\x0b\x8f\x64\x18\xef\x5b\x32\x86\x9d\x0e\x0c\xce\x9f\xe0\xcb\x3b\x86\xef\xa4\x03\xb5\x8e\xf5\x19\xd6\x77\xe0\xd4\xb7\x9c\xd3\x91\x5d\xf4\x5c\x44\xc2\xd3\xce\x9c\xe1\xd8\x0e\x9d\x01\x14\x9b\xb9\x72\xf7\x7f\x1f\x75\x1f\x5c\xef\x5e\xff\xde\xbf\xf6\xb5\x7f\x6b\x85\x87\xf8\xfd\xcb\xc1\x0a\x28\x6a\x7c\x50\x39\x9e\xbd\x23\x13\x02\x99\x89\x68\x7c\x8e\xf2\xff\x05\x00\x00\xff\xff\xb6\xfd\x24\xf7\x7e\x44\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 17534, mode: os.FileMode(436), modTime: time.Unix(1728289159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

