// Code generated by go-bindata.
// sources:
// static/pages/writing.html
// DO NOT EDIT!

package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5b\xff\x73\xd4\x46\x96\xff\xdd\x7f\x45\x5f\xc7\x55\x33\xbe\x58\x92\x3d\x36\x5a\xd6\xcc\xcc\x56\x82\x73\x8b\xf7\x80\xa5\xf8\x92\xdb\xab\xad\x2d\xb6\x47\xea\x99\x11\x96\x5a\xa2\xd5\x33\xc6\xb8\xa6\xca\xe1\x80\x40\x0a\x02\xb9\x63\x59\xc2\x92\x70\xdc\x25\x29\xee\x2e\xb1\xb3\x57\x5b\x1b\x07\x42\xf8\x63\x62\x8d\xed\x9f\xf6\x5f\xb8\xea\xd6\xb7\xd6\x8c\x06\x0f\xd8\x26\x84\xe3\x07\x8f\xd4\xfd\xfa\xf5\xd3\xfb\xbc\x7e\xfd\x51\xeb\x51\x6e\x32\xc7\x06\x36\x22\x8d\x0a\x3c\xdf\x84\xd5\x91\x91\x72\x13\x23\xb3\x3a\x02\x40\xd9\xc1\x0c\x01\xa3\x89\xa8\x8f\x59\x05\xb6\x58\x5d\xd9\x0f\xd3\x8e\x26\x63\x9e\x82\xcf\xb6\xac\x76\x05\xfe\x46\x39\xf5\x96\x72\xd0\x75\x3c\xc4\xac\x9a\x8d\x21\x30\x5c\xc2\x30\x61\x15\x38\xf7\x4e\x05\x9b\x0d\x2c\x8d\x23\xc8\xc1\x15\xd8\xb6\xf0\x82\xe7\x52\x26\x89\x2e\x58\x26\x6b\x56\x4c\xdc\xb6\x0c\xac\x88\x9b\x71\x60\x11\x8b\x59\xc8\x56\x7c\x03\xd9\xb8\x32\xd9\xa7\x06\xb5\x58\xd3\xa5\x92\x92\x33\x56\x34\x17\xb3\x98\x8d\xab\x47\xfe\x79\x76\xf6\xe8\x89\xb2\x16\xde\xf1\x76\xdb\x22\xf3\x80\x62\xbb\x02\x7d\xb6\x68\x63\xbf\x89\x31\x83\xa0\x49\x71\xbd\x02\x35\x9f\x21\x66\x19\x5a\xcd\x75\x99\xcf\x28\xf2\x54\xc7\x22\xaa\xe1\xfb\x70\xe8\xa1\x86\xeb\x38\xae\x34\xc6\x37\xa8\xe5\x31\xe0\x53\x23\x95\x39\x73\xb6\x85\xe9\xa2\x32\xa5\xee\x53\x27\xc5\x0c\x67\x7c\x58\x2d\x6b\xa1\x68\x75\xa4\xac\x85\x08\x8c\x94\x6b\xae\xb9\x28\xb4\xf0\x06\x4c\xf9\x25\x00\x65\xd3\x6a\x03\xc3\x46\xbe\x5f\x81\x04\xb5\x6b\x88\x82\xf0\x47\x31\x11\x9d\x07\xb5\x46\xf8\xeb\x37\x91\xe9\x2e\x28\xbe\x03\xc3\x61\xd9\x81\xdc\x5f\xc8\x22\x98\x02\x53\xa9\xdb\xf8\x1c\x38\xd3\xf2\x99\x55\x5f\x54\x22\x47\x2a\x35\xcc\x16\x30\x26\xc9\x60\x00\xca\x08\x30\x44\x1b\x3c\x14\x6a\x36\x22\xf3\xf1\x93\xf3\x38\xf0\x67\x34\xad\x61\xb1\x66\xab\xa6\x1a\xae\xa3\x21\xdb\x25\x0d\x62\x19\x58\x73\x16\x4d\x93\xf8\x30\x6b\xaf\x52\xa3\x88\x98\xf1\xcc\xc8\xb6\x1a\x44\xb1\x18\x76\x7c\xc5\xc0\x84\x61\x2a\x4d\xca\x3d\xd8\x6e\x80\x73\x8e\x4d\xfc\x70\xaa\x19\x4d\x5b\x58\x58\x50\x17\xa6\x54\x97\x36\xb4\xd2\xc4\xc4\x84\xe6\xb7\x1b\x10\x84\xd1\x03\x4b\x13\x10\x34\xb1\xd5\x68\xb2\xf0\xba\x6e\xd9\x76\x05\x12\x97\x60\x08\x7c\x46\xdd\x79\x5c\x81\x46\x8b\x52\x4c\xd8\x41\xd7\x76\x29\x94\xa6\x02\x91\x84\x62\x5b\x04\x1b\xc8\xab\x40\xea\xb6\x88\x09\xe5\xe6\x33\xae\x45\x7a\xdb\xe3\xa9\x21\x40\xd4\x42\x4a\xd3\x32\x4d\x4c\x2a\x90\xd1\x16\x4e\x9e\xdc\xa1\x4a\x29\x3b\x17\x5f\x01\x6f\xbb\xe7\x2a\x70\x02\x4c\x80\xd2\x34\x28\x4d\x43\x50\x77\x8d\x96\x8f\x6a\x36\xae\xc0\x3a\xb2\x7d\x9c\xf1\x04\x00\x65\x0f\xb1\x26\x30\x2b\xf0\x48\x69\x0a\x4c\xfe\x1c\x95\x40\x09\xf0\xd1\x93\x4a\x09\x94\x0e\x4d\xc9\xf7\x4a\xe9\xdd\xfd\xe9\x3d\x28\x29\xa5\xe6\xb4\x5d\x52\xa6\x9a\xba\x5d\x02\x53\xcd\x69\xb9\x0f\x94\xce\x43\xa0\xf5\x4c\x65\x58\xd4\xb0\x31\x30\xce\x55\xe0\x64\x09\x02\x63\xb1\x02\x27\xa7\x20\xa0\x15\x38\xdd\x23\x5c\xe6\x00\x64\x21\x63\xd4\x25\x8d\x64\xf1\x45\xb7\x69\x24\x69\x28\x89\x49\xcd\xb4\xda\x51\x5c\xc7\x97\x61\xfc\x87\xe1\x2e\x96\x3b\xb2\x08\xa0\x2e\x77\x0a\xbf\xe4\x6e\x5f\x0c\x6f\x68\xc3\x22\x0a\x73\xbd\x19\x30\xb9\xcf\x3b\x77\x00\xb8\x6d\x4c\xeb\xb6\xbb\x30\x03\x42\x0c\x0e\xc0\xfe\x25\x43\xdd\x85\x01\x2b\xc2\x56\x1c\x53\xd1\x81\x5b\xaf\xfb\x98\xf1\xeb\x29\x39\xfa\xeb\x2e\x75\x32\x0f\x59\x6b\x31\xe6\x92\x78\x78\x8d\x11\x50\x63\x44\xf1\xa8\xe5\x20\xba\x08\xfc\x56\xcd\xb1\xd8\xe9\x1a\xeb\xb3\xb7\xe6\x32\xe6\x3a\x91\xc9\xb0\x7a\x02\xb5\x71\x59\x0b\x95\x65\xf4\x4b\xb6\x21\x1b\x53\x06\xc4\x5f\xc5\x6f\x19\x06\xf6\xfd\x44\xab\x69\xf9\x9e\x8d\x16\x67\x00\x8f\xf1\x03\xbd\x01\x13\xba\x1e\x58\x66\x05\x52\xec\xb7\x6c\x76\xc4\x6f\xc0\xea\xfa\xd3\x4f\x82\xaf\xee\x74\xaf\xdc\x0c\x3e\xb8\xdf\x0f\x4f\x02\xc5\x00\x6b\x78\xda\xb6\x31\xeb\x9d\xaa\xb9\xaf\x47\xe0\xf4\x69\x8e\x23\xac\xce\x1e\x3d\xd1\xbd\x77\x3d\xf8\xe0\x41\xf0\x87\xcb\x65\xad\xb9\xaf\x67\x5c\xbf\xe6\xd3\xa7\x79\xe2\x83\x19\x03\x7a\x45\x39\x1c\x4a\x83\xba\x2d\x0f\xc8\x88\x4a\xc2\x36\xaa\x61\x5b\x46\xd7\x77\x94\x12\xe0\x17\x62\xac\xe8\xe6\x69\x57\x5c\xe4\x8c\xef\x89\x0d\xdf\x51\x26\x27\x72\xe6\xc9\x31\xcb\x68\x62\x63\x1e\xa4\x97\x8a\x45\x78\xea\xe8\x9b\x3b\x47\x17\x00\x65\x8b\x78\x2d\xd6\xaf\x4f\x11\xed\x10\xb0\x45\x0f\x57\x20\x45\xa6\xe5\xc2\x68\x13\x9c\x25\xfe\x51\xe4\x60\x28\x60\x46\xb6\x25\x32\x6e\x1b\xd9\x2d\x9c\xde\xba\xc4\xb0\x2d\x63\x3e\x6e\x38\xc8\x55\x62\xf3\x1f\x5a\xa4\x38\x06\xc1\xd2\x92\x55\x07\xf8\x2c\x18\x55\x67\x8f\x9e\x50\xb9\x2e\x10\x0f\xec\x74\x8c\x50\x74\x69\x09\x13\xb3\xd3\x19\x60\x74\xc6\xd9\x92\xd1\xe1\x93\x72\x5f\x24\xa6\xe4\x6b\x00\xe0\x2d\xd1\x5d\xdc\xba\xf3\x74\xeb\xfd\x6b\xeb\x8f\x3e\x1a\xcb\x9f\x69\x10\x5e\x99\x5c\xf2\x2a\x03\x64\x12\xdf\x73\xcd\x04\xa0\xf8\x36\x01\x28\x6c\xd8\x1e\xa0\x68\xe0\x2e\x02\x14\x69\x1c\x04\xd0\xac\xe8\x2e\x6e\x5e\xfa\x7e\x73\x65\xf5\x35\x06\xc8\xb0\xdd\x96\x59\xb7\x11\xc5\x09\x48\x72\x53\x02\x54\xda\xb8\x3d\x58\x92\x82\x5d\x04\x4c\xd2\x3a\x08\xb4\x83\x89\xc8\x6b\x8a\x56\xb3\x85\x16\xb0\x25\x3c\x91\xc0\x95\x69\x4b\xf0\x92\x5a\xb7\x07\x4c\x56\xb1\x8b\x88\xc9\x6a\x07\x41\x76\x48\xc8\x08\xe0\x8a\xc1\xf5\x0f\xd7\xd7\x1e\xed\x60\xb1\xe5\xf5\xf8\x0e\xb2\xed\x38\x17\x9d\x6e\x62\xdb\x83\x19\xb3\x19\x3e\xc7\x00\xff\xa3\x38\x2d\x86\x4d\xf1\x6e\xc2\x87\xe4\x6c\x92\x79\x31\x92\x3f\xf3\x8b\x6c\xde\xc2\x65\xb3\xc4\x9f\x9b\x4d\x52\xe7\x9c\x79\x38\x74\xe7\x76\x1b\xfb\xdc\xec\x6e\x6c\xed\x39\xc1\xe9\x12\x46\x5d\x5b\x8a\xc5\xd8\xba\xe8\x32\x8a\xc1\xa5\x25\x11\x4d\x73\xb3\x9d\x4e\xde\x03\xbe\x1c\xc7\x9d\xc0\x06\xe5\xef\xa8\x91\xf3\xc2\xdb\x21\x1d\x18\x0a\xbf\x2c\x27\xca\x96\x4a\xb7\x59\x67\x86\xad\x3b\x73\x68\x9f\xe0\xee\x92\xdd\xb9\x63\xef\x4e\xbf\x74\x92\x2b\xe0\xb6\xbc\xf6\xf4\x69\x4c\x50\x78\xfe\x92\x05\x17\x56\xbb\x77\x56\x83\x9b\x5f\x04\x37\x57\x37\x6e\x3d\xdc\x3d\x4c\xc3\xe4\x2c\xd2\x5c\xcd\x3d\x07\x73\xb3\x38\xdf\x0a\x72\xdf\xd9\xc4\xfb\x8f\x00\x3c\x63\x7a\x18\x12\x73\x5e\x7b\xfa\x9d\xa8\x25\xcd\xcf\xbc\x55\x0d\x9b\x01\x7f\xbd\xde\x3e\x33\xbf\x8c\x85\x26\xcc\x6f\xd1\x21\xd6\xd4\xe6\x87\xdf\x04\x37\x6e\xcf\x1d\xeb\xde\xfe\x36\xf8\xee\xc6\x4b\x7c\xf7\xd8\xbd\xcd\x97\x43\xf0\x4b\xcc\x4e\x2e\x7a\xd1\x06\xdc\xa2\xf6\x71\x2e\xc0\x3b\x92\x05\x2b\xbc\x21\x70\x23\x18\x84\xb0\x45\x83\x00\x24\x98\xcd\x11\x86\x69\x1d\x19\xfd\x6c\x28\xdd\xae\x5b\xd4\x3e\xc8\xaf\x8a\x05\xee\xdf\xc2\xd8\xa0\x47\x18\x66\xdb\xcd\xd8\x58\xdd\x5a\xbe\xbb\xf9\xf4\xfd\xee\x87\x9f\x07\x37\xfe\x33\x44\x64\x2f\x69\xd0\x1e\xba\x5e\xf6\x64\x3f\x06\x19\x3f\x27\x8b\xe8\xc5\xc0\x90\xc5\x76\x0d\x95\x7c\xf3\x23\x78\x36\x9e\x7c\x14\x5c\x7f\xb0\x03\x78\xe4\x0c\x25\x2f\xce\xbc\x0d\x88\x4f\x7c\x8a\xcb\x24\xd9\x48\x8c\x10\xc7\x79\x26\xf6\x0d\x6a\xd5\xb0\x59\x5b\x4c\xfb\x22\xd6\x94\x6e\x4f\xc2\xab\xa7\x8e\x1f\xce\xdd\x9c\x38\xe7\xc2\x36\x36\x06\x6c\x82\xc9\xa4\xb2\x43\x4e\x87\x23\x64\x0b\x8f\xca\x58\x71\x52\x26\x24\xf2\xa7\x4b\x28\x5e\x8f\xc5\xaf\x2e\xcf\x13\x86\x9a\xae\x83\x2c\xe9\xc0\x78\x60\x26\x9d\x0d\x05\x77\x23\x85\x72\x0f\x20\x8a\xd1\x36\xe0\x24\xa6\xa5\x80\xcc\xc6\x4d\xd4\x5d\xf0\x2b\x70\x6a\x60\xc4\x44\x63\x43\x0c\xaa\x23\x4b\x4b\x0a\xa0\x88\x34\x30\x18\xb5\xc6\xc1\x68\x1b\xcc\x54\xa2\x75\x19\x69\xec\x74\x46\x96\x96\x46\xdb\xe2\x47\x01\x98\x98\x40\xe9\x74\x72\xa3\x3f\x36\x7e\x98\x28\xc8\x58\xf1\xec\x48\xe8\xae\xde\xd8\x7c\x70\x6d\x7d\x6d\x79\x7d\xed\xbf\x83\xfb\xf7\x83\x9b\xd7\x77\x1e\x1b\x7b\xcf\xbc\xf4\xe7\x63\x5e\x59\x93\x77\x31\x8e\xf5\x9f\x2e\x0f\xd3\xfb\x79\x98\x9e\xcb\xc3\xf4\x57\x92\x87\xe9\xff\x9f\x78\x98\x3e\x88\x87\xe9\x83\x79\x98\xbe\x33\x1e\xa6\xef\x1a\x0f\xd3\x7f\xd2\x3c\x4c\xdf\x96\x87\xe9\x43\xf0\xb0\xe7\x07\x23\x9f\x87\xed\x10\x95\x7c\xf3\x5f\x2e\x0f\x4b\xd2\x8f\x10\x49\xfd\x7c\x6a\x20\x0f\xd3\x07\xf1\x30\x7d\x87\x3c\x4c\xdf\x86\x87\xe9\x2f\xca\xc3\xf4\x9f\x0a\x0f\xd3\x5f\x5d\x1e\xa6\xe7\xf0\x30\x7d\x48\x1e\xa6\x0f\xcb\xc3\xf4\xbd\xe4\x61\xfa\x6b\xce\xc3\x82\x4b\x7f\x5d\x7f\x7c\x7b\xeb\xd2\xf5\x8d\x27\x2b\xaf\x02\x1f\x3b\xe5\x63\x4a\xc4\xe7\x82\xed\x62\x79\xe3\xe3\xc7\xc1\x93\x3f\x6c\xdc\x7a\xd8\xbd\xf2\x8d\xf0\xf4\x4b\x38\xfa\x4c\xad\xe3\xe1\x91\xde\xa5\x19\x2d\x6e\xeb\x74\xf2\xc2\x3a\xee\x8d\x43\x3a\xc7\x86\x34\xfa\xb2\xc2\xcf\x8e\x3c\xf1\xd9\xe1\xf2\xfa\xd3\x07\xdd\xf7\x56\x83\x95\xab\xc1\xa5\x87\xe3\x20\x78\xfc\x68\x73\x65\x65\xf3\xfb\x7f\x0b\x2e\x7d\xfe\xa3\xe6\xa8\x63\xc8\xf7\x17\x5c\x6a\x0e\x8b\x69\xb0\x7a\x79\xe3\xdf\xdf\xdb\x63\x40\xc3\x2d\xce\x4b\x4c\x0b\x01\x4e\x4d\xe5\x08\xa4\x77\x29\xc0\x71\x5b\x3e\xc0\x71\xef\x50\x00\x67\x85\x7f\x6c\x80\xf7\x38\xd1\xfc\x13\xae\x35\x5d\x77\xfe\x55\xc8\x31\x91\x29\xa7\x8e\x1f\xde\x3e\x22\x4f\x1d\x3f\xfc\x52\x32\x8b\x6c\x13\x8f\x0d\xf9\x3e\x0d\xbe\xb4\x35\x3f\xfc\xd2\xfe\xa1\x02\xb0\x57\xfc\xd9\x21\x98\x4f\x59\x77\x50\x67\x58\xdd\xb8\xf0\x6d\xf0\xfe\xe3\xe0\xc6\x85\xcd\xe5\x7f\x09\x56\xee\x74\x6f\x7f\x1b\x59\xb4\xb9\xfa\x97\xee\x9d\x0f\xcb\x1a\xaa\x96\x6b\x54\xcb\x9f\xb9\x7b\x6b\xb5\x7b\xed\xbd\x8d\xbb\x17\x83\x1b\x77\xb6\xde\xbf\xf1\xc6\x92\xe5\xb5\xa7\xdf\x32\x4d\xda\x19\x07\xe1\xcd\x71\x51\x43\x95\xdc\xc6\x2c\x21\xba\xd7\x65\x59\x3d\x2b\x1b\x73\x94\x7c\xf6\xf0\x23\xa6\xd2\xc8\x3f\xc7\xf1\xd9\x16\xf6\xd9\xdb\x7c\x95\x6c\x1b\xc2\x92\xf0\xcb\x21\x7e\x79\x46\x66\xa2\x3c\xd3\xf3\x0c\x16\xd8\x2f\x2e\x73\x41\xb5\xbf\x7b\xa7\x84\x6f\xd0\x84\x2f\xb0\x30\x24\x1d\xeb\x6b\x8f\x36\xfe\xeb\xd1\x2f\xdf\x39\xb9\xb9\xfa\x4d\xf7\xcf\x17\xfe\xf6\xdd\xb5\xf5\xb5\xeb\x61\xe3\xb1\x5f\x9f\x88\x5a\x7f\x58\xbe\xd0\x13\xd1\xc1\xcd\x6b\xeb\x6b\x1f\xec\x49\x04\x0e\x93\xeb\xf7\xa4\x62\x72\x24\x9d\x50\x2e\xd1\xcc\xd8\x93\x53\xe7\x99\xa9\xed\xf4\x52\x34\x08\x53\x16\x44\xf9\xb0\x62\xf3\xbf\x21\x2a\x35\x8a\xd1\x7c\x7e\xdd\xa9\xb0\x49\x0c\xf3\xad\xf3\x78\x06\x4c\x4e\x25\xa7\x69\xb6\xdb\x10\x75\xdd\x5e\x8e\x4d\x52\xb1\x2b\x4f\x0b\xe2\x31\xca\x71\x01\x38\x17\x18\x2d\xd6\x5b\xc4\x60\x96\x4b\x8a\x63\x4b\xd1\xf8\xd1\x22\x54\x25\x2f\x8d\xa9\x2e\x29\x16\xc4\xc1\x40\x61\x3c\x91\xc6\x63\x60\x29\x79\x32\xac\x7a\x14\xb7\x31\x61\xb3\xb8\x8e\x5a\x36\x2b\x8e\x1d\x48\xfa\x46\x8b\x05\xbe\x27\x16\xc6\x54\x44\x2c\x07\x31\x5c\x5c\x02\xbe\x41\x5d\xdb\x3e\xc9\x9f\x6c\x02\x74\xc6\xc1\xd4\xc4\x84\x3c\x42\x45\x67\xd0\xb9\xe2\x92\x84\xa9\x83\x59\xd3\x35\x67\x00\xe4\x61\x07\xc7\xa5\x9e\x16\xb5\x67\x00\xd4\x7c\xd4\xc6\x99\x76\x13\x31\x34\xc3\x27\xe7\x68\x15\xc6\x54\x1f\x53\x0b\xd9\xd6\x79\x5c\x1c\x93\xc5\xa2\x32\xd7\x19\x10\x3f\x18\x28\x86\x05\xac\xf2\xe3\x45\x8f\xa1\x8a\xca\xd8\xc2\x98\x6a\xf8\x7e\x31\x2e\x88\x85\xe3\x00\xd6\x6c\xd7\x98\x87\xd2\x13\xf0\x7f\x56\x3d\x56\x05\xfe\xae\x52\x01\xd0\x9d\x87\xbd\x3a\xb3\x5a\x91\x69\x1e\xe4\xe1\x51\x0c\xeb\x70\x15\x93\xbf\x31\x52\xd8\x5b\x91\x33\x5a\x2c\xbc\x91\xd4\xd8\x16\xc6\xd4\x26\x73\xec\xd8\xe6\x8c\x68\x07\x60\xdb\xc7\x7d\x53\x6a\x1a\x70\xe7\x7b\xda\x7c\xcc\x4e\x5a\x0e\x76\x5b\x2c\x27\x1c\x86\xf3\x81\x28\x7d\xef\x71\x01\x88\xb0\x9d\xe8\x31\x6c\x44\x16\x90\x6e\x30\xa5\x2e\x4d\xa1\x28\x9e\x39\xfb\x9b\x43\xc7\x7b\x9d\x26\x0c\x08\xbb\x54\x9f\x21\xd6\xf2\x4f\xe2\x73\x2c\x33\x73\x3a\x41\x27\x9e\x39\xba\x88\x7e\xda\x88\x82\x1a\xae\xbb\x14\x8b\x62\x1a\x50\x01\x10\x86\x2b\x3c\x09\x83\xfe\xfa\xd5\xc4\x0e\xd3\x35\x5a\x0e\x26\x4c\x6d\x60\xf6\x8e\x8d\xf9\xe5\xdb\x8b\x73\x66\x31\xaa\xcc\x19\x53\x4d\x4b\x14\xd7\x9b\x15\x20\xaa\xeb\xa3\x61\x3c\x20\xa4\x49\x53\x9f\x6c\xab\x2f\xa4\x51\xb2\xc5\x23\xdb\x99\x22\x95\x30\x8d\xa9\x16\x21\x98\x1e\x3a\x79\xe4\x30\x7f\xd0\xb7\x44\xc0\xff\x23\x5e\x04\x73\xb3\x70\x08\x35\x72\x31\xcf\x40\x55\x51\x1d\xcd\x10\xea\xc2\x6d\xa9\x47\x51\xca\xc5\x0a\xa7\x05\x19\x2b\x84\x64\xac\x10\x93\x31\x8a\x1c\xd5\x70\x89\xef\xda\x58\x45\xb6\xb5\xd8\x22\x82\x98\x39\x88\xa0\x06\xd6\xd0\xfc\x2f\x7c\xcf\xa9\xec\x9b\xfc\x99\xae\x4e\x96\xf6\x4f\xee\x9f\xf8\xf9\x94\x4a\x50\x5b\xa1\x3c\xb7\xaa\x26\x9a\x57\xa7\xf7\xef\xff\xd9\xa4\x6e\x4e\x38\x87\xd0\x91\x46\xa3\x50\x0d\xae\xfc\x29\x78\xfc\x08\x24\x4f\xc0\x19\x5b\x68\x7e\xa7\x27\x10\xfa\xeb\x64\x5f\x93\x40\xd8\x31\xfc\x27\xdd\x79\x4c\xf6\x0e\xf3\x18\xef\x10\x00\xd5\x20\x1a\x32\x0c\xb7\x45\x98\xc6\xf8\xc4\x31\x86\xc1\xea\xe5\xad\x7f\xfd\x7c\x30\x7e\xf9\xe5\xb3\xdb\x63\x38\xd8\x71\xf1\x23\x67\x33\xc8\x70\xe0\x3d\x7f\xe4\x30\x3a\xfc\xa8\x28\x3e\xe0\xab\x0d\xac\x89\xfc\xa6\x9a\xc2\x22\x56\xb2\x47\xdd\xba\x65\x63\x0d\x79\x96\x22\xe0\xf5\x63\x7c\xd7\x1f\x7f\xb6\x71\xf5\x9a\x52\xdd\xf8\xee\xf6\xe6\xf7\x1f\x05\xd7\x1e\x05\xf7\xef\x83\xd9\xa3\x27\x8a\xeb\x4f\x9e\x6e\xdc\x7a\xd8\x7d\xf8\xa0\xfb\xc9\xd3\xb1\xc1\xf8\x0f\x28\xc7\x7d\x4d\x16\x71\x98\xc0\x80\x48\xe7\xe6\x0e\x61\x0f\xbb\x40\xaa\x72\xef\xd7\xb6\x04\x8e\x08\x03\x0b\x39\xda\x2f\x6c\x57\xfc\x2f\xcc\xf3\x4d\xc5\x20\x6f\x68\x8e\x45\x30\x5f\xf9\x61\x9e\x2e\x54\xbb\xb7\xbf\x0e\xfe\xe3\xd3\xcd\x95\xa7\x5b\x7f\x5c\x19\xb0\xf6\xf9\xf6\x6e\x86\xc5\xdb\xa0\x02\x0a\x4b\x4b\x69\xc5\x75\xa7\x53\x08\x65\xfc\x05\x8b\x19\xcd\x62\x24\x96\x90\x1d\x03\xf9\xe9\xff\x79\x98\x91\xa8\x47\xff\x36\x90\x74\x09\xda\x1e\xf3\x8f\x4e\x46\x91\x54\x39\x2f\x2b\xcb\xcf\x49\xc3\x28\x94\x0b\xbb\x65\x8d\x03\xa2\x7c\x90\xca\x18\xd8\x90\xae\xcb\x8a\xfa\x79\xcf\xb3\xcc\xea\x88\x57\x8b\xf8\x85\x62\x44\x7a\xb5\x48\xd6\x5f\x03\xb3\xc3\x6e\xc3\x4f\x56\xdc\x28\x8f\xa2\x22\xd4\xc4\x6b\xcb\x78\x4a\xf6\x22\x0a\x2b\xbd\x84\xbc\x21\x44\x72\x18\xae\x60\x71\xe2\x21\x12\xe5\x23\x82\xc4\x8a\xcf\x65\x6d\x64\x17\xa3\xf6\x71\xb0\x0f\xfc\x3d\x98\x14\x0c\x54\x32\x53\xb6\x93\xc7\x8a\x95\x16\xbc\xc5\xf1\x22\x57\xaf\xf1\x98\x49\x04\xf5\x7e\x41\x3d\x2b\xc8\x33\x43\x46\x23\x67\xff\x99\xef\xae\xb1\x2b\xfa\xbf\xb2\x8a\x02\x1a\x41\xf9\x33\xec\x3d\xf9\x36\x2e\xf5\x8f\xa4\x53\xe9\x2f\x3a\x95\xbe\xcd\x54\x7a\x3a\x95\xa6\x81\xf0\xd0\x4b\xfe\x8e\x2e\xe3\x9c\x0c\x14\x07\x35\x09\xda\x45\xf8\x06\x7c\x53\x34\xbd\x09\x73\x3f\x78\x0e\x7a\x95\xc8\x19\xde\xa2\x76\x8e\x78\xf4\xf6\x15\xc6\x34\xf7\x48\x78\xea\x24\x7c\x11\xba\x0b\xc8\x41\x95\x2d\x54\x8b\xa2\x0b\x06\x0f\xfe\x27\xb8\xfc\xf1\xc6\xdd\x8b\xa7\x8e\x1f\xde\xba\xb7\xbc\xf9\xf4\x56\xf0\xa7\x4f\x83\x4b\x5f\x6e\x3c\xf9\x68\xee\xd8\xbb\xd3\xc1\xbd\xaf\x83\x4f\x96\x7f\x58\xbe\x10\x7c\x71\xe1\x6f\xdf\xdd\x8d\xd3\x18\xdf\xad\xb8\x3e\xd5\xf2\x54\xbf\xa6\x59\xde\x0f\xcb\xef\xc5\x7d\xce\xa2\xe5\xa9\x96\x67\x79\x2a\xc1\x4c\x6a\x37\x4d\xe2\xab\x2e\x45\x8b\x22\xe1\x89\xaf\xe4\x96\x17\x3d\x6e\xcf\x2b\x5b\x64\xae\xfe\xbc\xe6\xea\xcf\x36\x57\xcf\x33\xb7\xad\xab\xc2\x62\x1b\x69\x67\x7c\x97\x48\x3d\xbe\x87\xb1\xa9\x12\xdc\xd2\x55\x6c\xb6\x38\x0f\x6b\x60\x36\x77\x4c\xf5\x9a\x89\xd9\x7d\x41\x22\x7f\xcd\x97\x83\xa4\x3f\x0c\x9f\x11\x2d\xf9\x70\x0f\x8c\x8e\xe1\x82\x2b\x8e\x96\x9d\x04\x4b\x7f\xc5\xc2\xdc\xb1\xf8\xa3\x46\x70\xef\x61\xf0\xd9\xdd\x60\xe5\x49\xb0\xf6\xc5\xc6\xdd\x8b\x9b\xdf\xac\x6e\xdc\xfa\x73\xf0\xf1\xc3\xf5\xb5\xaf\x42\xc2\xf2\xbc\x50\xe7\x4f\xb6\xf5\xf8\xce\xe6\xca\x67\xa1\xc6\x8d\x2f\xbf\x0c\xbf\xdc\xa6\xd0\x17\xd7\xd7\x96\x37\xaf\x7c\xb9\xbe\xf6\x68\xeb\x93\x4f\xd7\xd7\xfe\xd2\xfd\xe3\x5f\x37\xee\x5e\xe4\xfd\x63\x09\x66\x99\x6c\x9c\xb8\x31\x53\x74\xd0\x9f\x9e\x33\x06\x6f\xe7\x7b\xec\x78\x6c\x31\xd9\x40\xac\x7a\xce\xd1\x0a\xcf\xaa\x61\xeb\xaf\x7c\x97\x80\x0a\xf8\xd5\x89\x5f\x1f\x55\x3d\x44\x7d\xdc\x77\xa8\x51\x77\x29\x28\x8a\x34\x5c\x99\x38\x00\xac\x72\x3a\x4e\xb5\x31\x69\xb0\xe6\x01\x60\xbd\xf9\x66\xf6\xbc\x60\x18\x33\x91\xe7\x61\x62\x16\x33\xa7\x0c\xbf\x2f\xbb\x9e\x88\xd8\x90\xad\x15\x46\x97\xd2\xd9\x7e\x6b\xfd\x2e\xe4\x12\x85\xec\x89\x65\xae\x4c\xb1\xb7\xf5\x2d\xd3\xa4\xd8\xf7\x7f\x3b\xf1\xbb\xce\x58\xcf\xd1\x66\x38\x65\xf5\xf7\x52\xb3\x74\xae\x91\x9e\x6a\x68\x1a\xd8\x5a\xbe\xba\xbe\xf6\x55\xd2\xc2\x23\x19\x26\xfb\x96\x8c\x61\xa7\x03\xc3\xf3\x27\xf8\xfc\x8e\xe1\x3b\xe9\x40\xad\x63\x7d\x86\xf5\x1d\x38\xf5\x2d\xe7\x6c\x64\x97\x7d\x0f\x91\xe8\xb4\xb3\x60\xb8\xb6\x4b\x67\x00\xc5\x66\xa1\xda\xfd\xdf\x07\xdd\x7b\x57\xbb\x57\xbf\x0f\xae\x7c\x1d\xdc\x58\xe5\x21\x7e\xf7\x62\xb8\x02\xca\x1a\x1f\x54\x4d\x66\xef\xc8\x84\x40\x66\x22\x1a\x9f\xa3\xfa\x7f\x01\x00\x00\xff\xff\x16\x4a\x60\x24\x77\x44\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 17527, mode: os.FileMode(436), modTime: time.Unix(1728292429, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

