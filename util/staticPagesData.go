// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x5f\x6f\x1b\xc7\x11\x7f\xe7\xa7\x98\x2e\x0c\x44\x02\x72\x3c\x89\x52\x88\x54\xe6\x11\xb0\x4d\xb7\x11\xea\x38\xad\x15\x19\x7d\x13\xf6\xee\x86\xbc\xb5\xf6\x76\xcf\x7b\x7b\xa4\x58\x82\x80\x1a\x34\x6d\x11\x24\x80\x03\xa4\x80\x91\x3a\x75\x53\xb4\x41\x51\x34\x75\x1f\x8d\xa2\xa9\x3f\x4c\x44\xff\x79\xea\x57\x28\xf6\xfe\x90\x47\xf1\x28\xc9\x91\xdc\xa6\xd1\x83\xb8\x7f\x66\x66\x67\xe6\x37\xfb\xbb\xbb\x69\x05\x3a\xe4\xc0\xa9\xe8\x39\x04\x05\x69\xd7\x6a\xad\x00\xa9\xdf\xae\x01\xb4\x42\xd4\x14\xbc\x80\xaa\x18\xb5\x43\x12\xdd\xb5\xde\x24\xb3\x8d\x40\xeb\xc8\xc2\xbb\x09\xeb\x3b\xe4\xa7\xd6\xee\x15\xeb\x9a\x0c\x23\xaa\x99\xcb\x91\x80\x27\x85\x46\xa1\x1d\xb2\x7d\xdd\x41\xbf\x87\x25\x3d\x41\x43\x74\x48\x9f\xe1\x20\x92\x4a\x97\x44\x07\xcc\xd7\x81\xe3\x63\x9f\x79\x68\xa5\x93\xd7\x81\x09\xa6\x19\xe5\x56\xec\x51\x8e\xce\xfa\x82\x19\x9a\xe8\x40\xaa\x92\x91\x3b\x2c\x3f\x4b\x33\xcd\xb1\xdd\xe9\xdc\xdc\xb1\x7e\xf8\x4e\xcb\xce\xa6\x66\xe3\x7b\x96\x05\x57\xa5\xd4\xb1\x56\x34\x82\x6b\x3b\x3b\x60\x59\xe9\x06\x67\x62\x1f\x14\x72\x87\xc4\x7a\xc8\x31\x0e\x10\x35\x81\x40\x61\xd7\x21\x76\xac\xa9\x66\x9e\xed\x16\x8a\xf5\x90\x89\xba\x17\xc7\xe4\xcc\xaa\x9e\x0c\x43\x59\xe8\xb4\xec\x2c\xcb\xb5\x96\x2b\xfd\x61\x6a\xc3\x2c\xa0\x32\x43\x80\x96\xcf\xfa\xe0\x71\x1a\xc7\x0e\x11\xb4\xef\x52\x05\xd9\x8f\xe5\x53\xb5\x0f\x6e\x2f\xfb\x8d\x03\xea\xcb\x81\x15\x87\x24\x53\x9b\x57\x34\x39\xa1\x4c\xa0\x02\xdf\xea\x72\x3c\x80\x3b\x49\xac\x59\x77\x68\xe5\xc9\xb2\x5c\xd4\x03\x4c\x41\x87\xfc\xaf\x45\x0b\xa7\xc9\xfc\xf1\x96\xab\xa8\xf0\x0b\x43\x94\xb3\x9e\xb0\x98\xc6\x30\xb6\x3c\x14\x1a\x55\xc9\x06\x40\x2b\xee\xf7\xe0\x20\xe4\x22\x76\x88\xa9\x92\x2d\xdb\x1e\x0c\x06\xf5\xc1\x46\x5d\xaa\x9e\xdd\x58\x5b\x5b\xb3\xe3\x7e\x8f\x40\x06\x38\x69\xac\x11\x08\x90\xf5\x02\x9d\x8d\xbb\x8c\x73\x87\x08\x29\x90\x40\xac\x95\xdc\x47\x87\x78\x89\x52\x28\xf4\x35\xc9\xa5\x22\xa5\xa3\x20\x97\xb0\x38\x13\xe8\xd1\xc8\x21\x4a\x26\xc2\x27\xe5\xe5\x3b\x92\x89\xe3\xeb\xc5\xd1\x04\xa8\x62\xd4\x0a\x98\xef\xa3\x70\x88\x56\x09\x4e\x23\x0f\x95\xd5\x98\x3f\xcb\x14\xed\x55\x79\xe0\x90\x35\x58\x83\xc6\x26\x34\x36\x09\x74\xa5\x97\xc4\xd4\xe5\xe8\x90\x2e\xe5\x31\xce\x65\x02\xa0\x15\x51\x1d\x80\xef\x90\xb7\x1b\x1b\xb0\xfe\x7d\xda\x80\x06\x18\xed\x75\xab\x01\x8d\xb7\x36\xca\x73\xab\x71\xfb\xcd\xd9\x1c\x1a\x56\x23\xd8\xe4\x0d\x6b\x23\x68\xf2\x06\x6c\x04\x9b\xe5\x3d\x68\xfc\x8c\x80\x7d\xec\x28\x8f\x29\x8f\x23\x78\x07\x0e\x59\x6f\x10\xf0\x86\x0e\x59\xdf\x20\xa0\x1c\xb2\x69\x84\x5b\x26\xeb\xf3\x38\x69\x25\x45\x6f\x76\x49\xf2\xf9\xac\x1c\x6c\x3a\x2d\x2c\xdb\x67\xfd\xbc\x38\x8b\x61\x56\xc4\x59\xcd\xa6\xf7\x92\x32\x01\x4a\x9a\x54\x98\xa1\x49\xf6\x30\x9b\xa8\x1e\x13\x96\x96\xd1\x16\x6c\xac\x45\x07\x64\x56\xe4\xd5\x75\xcb\xad\xd0\xb7\x9a\x20\xbb\xdd\x18\xb5\x19\x6f\x94\x6b\xb4\x2b\x55\x08\xd4\xd3\x4c\x0a\x73\xbb\x68\x1f\x09\x84\xa8\x03\xe9\x3b\x24\x92\xb1\x36\x24\x56\x0a\xd2\x4d\xb4\x96\x02\xf4\x30\x42\x87\xc4\x89\x1b\x32\x3d\x85\xd8\xd5\x02\x5c\x2d\xac\x48\xb1\x90\xaa\xe1\x71\x8f\x5d\xa9\xb5\x0c\xb7\xa0\xb1\x16\x1d\x5c\x26\xed\x1d\xda\xc7\x96\x9d\xd9\x9b\x3f\xa3\xe4\xbd\x21\x35\x8e\xfa\x78\x19\x04\x6f\x1c\x13\xd8\xdb\x33\xc9\x23\xed\xce\xcd\x9d\xa7\x0f\x3e\x9a\x7c\xf0\xf9\xe4\x37\xbf\x6c\xd9\xc1\x1b\xc7\xf4\x16\x2d\xef\xed\x19\xca\x38\x66\x7f\x5e\xd2\x64\xc8\xea\x29\x99\x44\x0b\x62\x15\x82\x5e\x80\xde\x3e\xcc\x86\x16\x13\xe6\xda\x54\xa8\x02\xb4\x98\x88\x12\xbd\xa8\x6e\xa5\xeb\x24\xcf\xb2\xa2\x3e\x93\x24\xa7\xe8\x8e\x88\x6f\xd2\x10\x09\x30\xdf\x21\x94\x33\x5f\xc4\x04\xfa\x94\x27\x38\x9b\x4a\xe1\x71\xe6\xed\x17\x0b\xd7\x8c\x49\xf4\x7f\x90\x88\x95\x55\x02\xa3\x11\xeb\x02\xde\x85\x4b\xf5\xce\xcd\x9d\xba\xb1\x05\x85\xe2\x78\xec\x65\xa2\xa3\x11\x0a\x7f\x3c\xae\x74\x99\x53\x17\x79\x85\xcb\xe9\xba\xb9\xc0\x6a\xea\x48\x95\x3e\xc0\x95\x74\x73\xe5\xc5\xfd\x27\x2f\x7e\xf5\xe1\xd1\x3f\x3e\x5e\xad\x3a\xc5\x4e\xcd\x55\xa4\xdb\x2e\x95\xf9\xb7\x04\x05\x5f\xc4\x91\xf4\xa7\x28\x14\xd3\x29\x0a\xd9\xc2\xe9\x28\xe4\x8a\x17\x86\x42\x6e\xaf\x1a\x85\x4e\xba\xb9\xf2\xfc\xfd\x7f\x3d\xff\xdb\xa3\xef\x02\x0a\x1e\x97\x89\xdf\xe5\x54\xe1\x14\x89\xf2\xd2\x14\x8d\xd9\xe2\xe9\x88\x94\x0c\x5c\x18\x2a\x25\x9b\xd5\xc8\x5c\x9b\x0a\x9c\x1b\x92\xea\xc5\x33\x53\x5b\x16\x4e\xea\x75\x47\xc4\xdb\x9d\x69\xb9\x6f\xfb\x37\xd2\x88\xda\xdb\x9d\xe5\x0e\x55\xe0\x29\x85\x56\x92\x97\xe0\x2b\x6c\xe6\xc3\x1c\xb7\xd1\x28\xc5\x60\xbb\x33\x1e\x2f\x12\xf3\x42\x48\x17\x14\xde\x0e\x7a\x0a\x35\x99\x46\x98\xcf\xdb\xd9\xef\xf9\xc2\xcc\x6d\x15\xa1\x16\xd3\xf9\x70\xb3\xd5\xe5\x21\xd7\x4e\x4c\xc3\xa2\xd0\x79\x1e\xa3\xdb\x3f\xbe\xbd\x79\x9e\xc7\x27\xbc\x2c\x3e\x25\x92\xa8\x82\x2a\x4b\x72\x46\x01\xa9\x90\x2b\x0f\xc8\x72\xae\x30\x79\x66\x51\x7f\x73\x0f\x05\x4d\x3f\xa0\x32\x24\xb6\xa3\xfe\xe6\xf5\x7c\x65\x76\xdd\xcd\x6a\x3d\x5b\x06\xf3\xc6\x7a\xfa\x4d\x3f\xd3\x3d\x2f\x9f\xdf\x7e\x7a\xff\xd1\xe4\xde\x17\x93\x7b\x8f\x9e\x7d\xf2\xe7\x25\xa5\x54\x85\xf2\x37\xac\xe6\xf4\xe8\x44\x71\xd2\x7e\xfa\xf0\x4f\xcf\x1f\xfd\x61\xf7\xd6\x8d\xd3\xea\x37\x4b\xad\xd1\x39\xa9\x94\x4d\xaa\x76\x8d\xcc\x34\xc1\xa9\x46\xfa\xd2\xef\x63\xec\x29\xe6\xa2\xef\x0e\x67\x7b\x7b\x01\xf2\xa8\x5c\xe8\x69\xb2\x77\x6f\xdd\xa8\x28\x73\xf3\x06\x1d\x52\xce\xe7\x8c\xe7\x06\xca\x3e\x69\x3c\xd0\x60\xfe\x59\x61\xa2\xd1\x27\xed\xa7\x5f\xfe\x71\xf7\xd6\x8d\x17\x0f\x0e\x9f\x3f\xf9\x64\xf2\xdb\xdf\x1d\x7d\xf5\xfb\x67\x9f\xfe\x62\xf2\xfe\x5f\x9f\x7d\xf5\xb1\xa9\xe3\xc9\x83\xbf\x4f\x3e\x3b\xfc\xfa\xf0\xbd\xc9\x17\xef\xfd\xfb\x9f\x9f\x9a\x4f\xa8\x78\xcb\xb6\x69\xc4\x2c\x73\x4a\x9d\x45\xf5\xd8\xb5\x59\xf4\xf5\xe1\xcf\xf3\xcf\xab\x1e\x4a\x16\xd5\x05\x26\x75\xf4\x93\xba\x27\x5a\x76\xea\xd8\xab\x46\xcc\x97\xe6\x3d\x3f\x26\xed\x4e\x36\x58\x8e\x99\x89\x9e\x2a\xa4\xd5\x58\x4d\xf3\x57\x18\x2c\xa1\xd7\x29\x96\x94\x1c\xc4\x0e\xd9\x58\x0a\x5e\xae\x9b\xe5\xbf\x5d\x1b\x8d\x2c\x50\x54\xf4\x10\x2e\xb1\xd7\xe1\x52\x1f\xb6\x1c\xc8\xc0\xcc\x2d\x8e\xc7\xb5\xd1\xe8\x52\x3f\xfd\xb1\x00\x85\x0f\xd6\x78\x5c\xf1\x94\x2a\x5c\x3f\x1d\xfd\x39\x0f\x4e\xae\x80\xa3\xc7\x87\xcf\x3f\xff\xf0\xe8\xf1\xe1\xd1\xe3\xbf\x4c\x1e\x3e\x9c\xdc\xfb\xe8\x25\x20\x7b\xf5\x54\xda\xfc\xff\xa7\xd2\xe6\x22\x95\x36\x2b\xa9\xb4\xf9\x6a\xa8\xb4\xf9\xbf\xa3\xd2\xe6\x05\x53\xe9\x34\xa3\xa9\xc8\x2c\x9d\xbb\x4b\xa9\xb4\xb9\x48\xa5\xc7\x58\xac\x39\x65\xb1\x53\x69\xb5\x79\x31\xb4\xda\x3c\x99\x56\x9b\x27\xd1\x6a\xf3\xbf\xc9\xab\xcd\x8b\xe6\xd5\x66\x05\xaf\x36\xcf\xc8\xab\xcd\xb3\xf2\x6a\xf3\x55\xf1\x6a\xf3\x5b\xc5\xab\x2f\xd3\x4d\x5a\xd6\x30\x6a\xd9\xc6\xf9\x93\x3b\x6b\x26\xe2\x54\xa5\x65\xf0\x88\x74\x26\xd0\x4d\x44\xda\xf7\x82\x1e\xea\x9f\x24\xa8\x86\xb7\x0d\x68\x2e\xc7\x95\xd5\x51\x6e\xae\x4f\x15\xdc\x35\x5b\xe0\xc0\x80\x09\x5f\x0e\xea\x5c\x7a\xd4\x68\xd5\x63\xa4\xca\x0b\xea\x71\xe2\xc6\x5a\x31\xd1\x5b\x59\x5f\xbd\x9c\xab\xb1\x2e\xac\xe4\x6a\x8e\x03\x24\xa6\x7d\x7c\x67\xdf\x49\xfb\xa1\xab\x30\x9a\xba\x7e\xdc\x62\xa0\xb0\x0b\x0e\x10\x7b\xd6\x28\xa5\x1c\x95\x5e\x21\x47\x4f\x3e\x9b\x7c\x79\xff\xe9\xaf\xef\x4d\x3e\x78\x48\x8a\x6f\xf5\xac\x0e\xb2\xff\x8b\x21\xd4\x0a\xff\x5d\xec\x4a\x85\xe9\x27\x96\x43\x48\x6d\x3e\xf4\xc5\x16\xd1\xd4\x3f\x5f\x7a\x49\x88\x42\xd7\x7b\xa8\xaf\x73\x34\xc3\xab\xc3\x6d\x7f\x25\xff\x5a\x5b\xad\xfb\x2c\x6d\xd5\xfa\x0e\xa4\xbd\xda\x52\xec\xa5\x23\x67\x8d\x85\x53\xed\x65\xdc\x56\xf6\xb7\x76\x9a\x2b\xa5\x8f\xd1\xd5\x3a\x13\x02\xd5\x5b\xef\xbe\x7d\xc3\xe4\xf0\x8a\xe7\x61\x1c\xff\x08\x87\xb0\xdd\x21\x67\x32\x93\x7f\x96\x2d\xb5\x93\xef\xe7\x49\x9f\x4f\xe3\x62\x8f\xe7\x3b\x92\xc6\xf3\x25\xef\x5d\xb9\x8f\xa2\x3a\x63\xd5\x7d\x98\xd3\xb3\xb6\xdc\x55\xab\xf0\xb4\x14\x39\x38\x67\xcc\xd7\xcb\x83\x65\x6e\xf3\x59\xb5\x72\x48\xc8\xc5\xe6\xd2\x5c\x6e\x3f\xeb\x81\x81\x03\xaf\x8d\x46\xb3\xde\xd5\x78\xfc\x5a\x26\x13\x0f\x98\xf6\x82\x95\x5c\x6c\xca\x6b\x1e\x8d\x67\x7d\xdf\xad\x12\x25\x2d\xf2\xc1\x74\xcb\x55\x48\xf7\x2f\xcf\x71\x4f\x61\x28\x6f\x35\x96\x0d\x2d\xde\x88\xb3\x18\x2a\x75\xc7\xca\xc6\xaa\x8b\xe5\x64\x83\x3e\x76\x69\xc2\xf5\x37\x0f\x6e\x9c\x3e\x3a\x8a\x07\x46\xad\x65\x07\x3a\xe4\xed\xff\x04\x00\x00\xff\xff\xaf\xec\x58\x36\xe3\x1d\x00\x00")


func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 5218, mode: os.FileMode(420), modTime: time.Unix(1598947442, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
