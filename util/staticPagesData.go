// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x5b\x8f\x1c\xc5\x15\x7e\xdf\x5f\x71\x52\xb2\x60\x36\x72\x77\xcf\xce\xae\x47\x64\x3d\xbd\x11\x78\x48\x58\x65\x31\xc4\x8b\x11\x6f\x56\x4d\xf7\x99\xe9\xf2\x56\x57\xb5\xab\xaa\x67\x76\x18\x8d\xb4\x41\x21\x89\x10\x48\x46\x22\x12\x22\x10\x87\x28\x41\x51\x14\xe2\x3c\xa2\x28\x84\x1f\xc3\x8e\x31\x4f\xf9\x0b\x51\xf5\x65\xa6\xe7\xb2\x17\xe3\x75\x20\xbc\xec\xd4\xed\x7c\x55\x75\xbe\x53\x5f\x75\x9d\x6d\x45\x26\xe6\xc0\xa9\xe8\xf9\xe4\xf5\x88\xec\xac\xad\xb5\x22\xa4\xe1\xce\x1a\x40\x2b\x46\x43\x21\x88\xa8\xd2\x68\x7c\x92\x9a\xae\xf3\x0c\x99\x75\x44\xc6\x24\x0e\xde\x49\x59\xdf\x27\xaf\x39\x37\x9f\x75\xae\xc9\x38\xa1\x86\x75\x38\x12\x08\xa4\x30\x28\x8c\x4f\x76\x9f\xf7\x31\xec\x61\xc5\x4e\xd0\x18\x7d\xd2\x67\x38\x48\xa4\x32\x95\xa1\x03\x16\x9a\xc8\x0f\xb1\xcf\x02\x74\xb2\xca\x65\x60\x82\x19\x46\xb9\xa3\x03\xca\xd1\xdf\x58\x82\xa1\xa9\x89\xa4\xaa\x80\xdc\x66\xc5\x5c\x86\x19\x8e\x3b\xed\xf6\xf5\x7d\xe7\xa7\x2f\xb5\xbc\xbc\x6a\x3b\x7e\xe0\x38\xf0\x9c\x94\x46\x1b\x45\x13\xb8\xb6\xbf\x0f\x8e\x93\x75\x70\x26\x0e\x40\x21\xf7\x89\x36\x43\x8e\x3a\x42\x34\x04\x22\x85\x5d\x9f\x78\xda\x50\xc3\x02\xaf\x53\x1a\xba\x31\x13\x6e\xa0\x35\x39\xb7\x69\x20\xe3\x58\x96\x36\x2d\x2f\xf7\xf2\x5a\xab\x23\xc3\x61\x86\x61\x1b\x50\xd9\x22\x40\x2b\x64\x7d\x08\x38\xd5\xda\x27\x82\xf6\x3b\x54\x41\xfe\xe3\x84\x54\x1d\x40\xa7\x97\xff\xea\x88\x86\x72\xe0\xe8\x98\xe4\x66\xf3\x86\xd6\x27\x94\x09\x54\x10\x3a\x5d\x8e\x87\x70\x3b\xd5\x86\x75\x87\x4e\xe1\x2c\xa7\x83\x66\x80\x28\xa6\xc6\x00\x2d\x5a\x2e\x9a\xcc\x4f\xef\x74\x14\x15\x61\x09\x44\x39\xeb\x09\x87\x19\x8c\xb5\x13\xa0\x30\xa8\x2a\x18\x00\x2d\xdd\xef\xc1\x61\xcc\x85\xf6\x89\x8d\x92\x6d\xcf\x1b\x0c\x06\xee\x60\xd3\x95\xaa\xe7\x35\xea\xf5\xba\xa7\xfb\x3d\x02\x39\xe1\xa4\x51\x27\x10\x21\xeb\x45\x26\x2f\x77\x19\xe7\x3e\x11\x52\x20\x01\x6d\x94\x3c\x40\x9f\x04\xa9\x52\x28\xcc\x35\xc9\xa5\x22\x95\xa9\xa0\x18\xe1\x70\x26\x30\xa0\x89\x4f\x94\x4c\x45\x48\xaa\xcd\xb7\x25\x13\x8b\xed\xe5\xd4\x04\xa8\x62\xd4\x89\x58\x18\xa2\xf0\x89\x51\x29\x4e\x77\x1e\x2b\xa7\x31\x3f\x97\x0d\xda\xe7\xe4\xa1\x4f\xea\x50\x87\xc6\x16\x34\xb6\x08\x74\x65\x90\x6a\xda\xe1\xe8\x93\x2e\xe5\x1a\xe7\x3c\x01\xd0\x4a\xa8\x89\x20\xf4\xc9\x8b\x8d\x4d\xd8\xf8\x11\x6d\x40\x03\xac\xf5\x86\xd3\x80\xc6\x0b\x9b\xd5\xba\xd3\x78\xf5\x99\x59\x1d\x1a\x4e\x23\xda\xe2\x0d\x67\x33\x6a\xf2\x06\x6c\x46\x5b\xd5\x3e\x68\xbc\x4e\xc0\x5b\x98\x2a\x60\x2a\xe0\x08\xc1\xa1\x4f\x36\x1a\x04\x82\xa1\x4f\x36\x36\x09\x28\x9f\x6c\xd9\xc1\x2d\xeb\xf5\x79\x9e\x8c\x92\xa2\x37\x3b\x24\x45\x7d\x16\x0e\x1e\x9d\x06\x96\x17\xb2\x7e\x11\x9c\x65\x31\x0f\xe2\x3c\x66\xb3\x73\x49\x99\x00\x25\xad\x2b\x6c\xd1\x3a\x7b\x98\x57\x54\x8f\x09\xc7\xc8\x64\x1b\x36\xeb\xc9\x21\x59\x0e\x72\x25\x07\x27\xc4\x30\x77\xe2\xd0\x69\x82\xec\x76\x35\x1a\x5b\xde\xac\xc6\x6b\x57\xaa\x18\x68\x60\x98\x14\xf6\xa4\xd1\x3e\x12\x88\xd1\x44\x32\xf4\x49\x22\xb5\xb1\x82\x56\xd9\x70\x27\x35\x46\x0a\x30\xc3\x04\x7d\xa2\xd3\x4e\xcc\xcc\x94\xee\x8e\x11\xd0\x31\xc2\x49\x14\x8b\xa9\x1a\x2e\xae\xbe\x23\x8d\x91\xf1\x36\x34\xea\xc9\xe1\x55\xb2\xb3\x4f\xfb\xd8\xf2\x72\xbc\xf9\x39\x2a\xab\xb7\x02\xc7\xd1\x2c\x86\x44\x74\x65\x61\xc0\xad\x5b\xd6\x91\x64\xa7\x7d\x7d\xff\xc1\x87\xef\x4c\xde\xfa\x78\xf2\xdb\x5f\xb5\xbc\xe8\xca\x82\xdd\x32\xf2\xad\x5b\x56\x3e\x16\xf0\xe7\x47\x5a\x0f\x39\x3d\x25\xd3\x64\x69\xd8\x8a\x81\x41\x84\xc1\x01\xcc\x8a\x0e\x13\xf6\x08\xad\x30\x05\x68\x31\x91\xa4\x66\xd9\xdc\xc9\xda\x49\xe1\x65\x45\x43\x26\x49\x21\xd7\x6d\xa1\xaf\xd3\x18\x09\xb0\xd0\x27\x94\xb3\x50\x68\x02\x7d\xca\x53\x9c\x55\xa5\x08\x38\x0b\x0e\xca\x86\x6b\x16\x12\xc3\x9f\xa4\xa2\xb6\x4e\x60\x34\x62\x5d\xc0\x3b\x70\xc9\x6d\x5f\xdf\x77\x2d\x16\x94\x86\xe3\x71\x90\x0f\x1d\x8d\x50\x84\xe3\xf1\xca\x25\x73\xda\x41\xbe\x62\xc9\x59\xbb\x3d\xcc\x6a\xba\x90\x55\xf6\x00\xcf\x66\x9d\xb5\xaf\xdf\xff\xe2\xeb\x5f\xbf\x7d\xfc\xcf\x77\xd7\x57\xcd\xe2\x65\x70\x2b\xdc\x3d\x3b\x44\xdf\x19\x16\x42\xa1\x13\x19\x4e\x59\x28\xab\x53\x16\xf2\x86\xb3\x59\x28\x0c\x2f\x8c\x85\x02\x6f\x35\x0b\xed\xac\xb3\xf6\xf0\xcd\x7f\x3f\xfc\xfb\xfd\xef\x03\x0b\x01\x97\x69\xd8\xe5\x54\xe1\x94\x89\x6a\xd3\x94\x8d\x59\xe3\xd9\x8c\x54\x00\x2e\x8c\x95\x0a\xe6\x6a\x66\xae\x4d\x07\x5c\x04\x25\x3a\xa6\x9c\x97\x61\x7a\x2b\x42\x9e\x90\xb9\x05\x1a\x3c\x34\x60\xff\x38\x71\x6a\x30\x24\xf6\x8e\xb3\x26\x4b\x82\xb8\x0a\xff\xfc\x2a\x99\x7b\x26\x73\x40\x5b\xe8\xdd\xf6\xf4\xe4\xec\x86\x7b\x99\x73\x76\x76\xdb\x27\xef\x6d\x45\x68\x48\x61\x94\xe4\x95\x48\x28\x31\x8b\x62\x11\x02\xa3\x51\x46\xe7\x6e\x7b\x3c\x5e\xd6\xf8\xa5\x2d\x5d\xd0\xf6\xf6\x31\x50\x68\xc8\x74\x87\x45\x7d\x27\xff\x7d\xbc\x6d\x16\x58\xe5\x56\xcb\xea\xfc\x76\xf3\xd6\x93\xb7\xbc\x76\xaa\x1b\x96\x07\x3d\xce\x8d\xbc\xfb\xf2\xab\x5b\x8f\x73\x13\xc3\xa3\xf2\x53\xd1\x9b\x55\x54\xe5\x4e\xce\xd5\x24\x1b\xd4\x91\x87\xe4\x64\xd9\xb1\x7e\x66\x49\x7f\xeb\x16\x0a\x9a\xbd\xcb\x72\x26\x76\x93\xfe\xd6\xf3\x45\xcb\x4c\x39\x6c\xab\x9b\x37\x83\xfd\x10\x3e\x5b\x34\xce\x25\x19\xd5\xf9\x77\x1e\xbc\x7f\x7f\x72\xf7\x93\xc9\xdd\xfb\x5f\xbd\xf7\x97\x13\x42\x69\x15\xcb\xdf\x30\x9a\xb3\xa9\x53\xc5\xc9\xce\x83\x7b\x7f\x7e\x78\xff\x8f\x37\x6f\xec\x9d\x15\xbf\xb9\x6b\xad\xcd\x69\xa1\x6c\x5d\x75\xd3\x8e\x99\x3a\x38\xb3\xc8\xde\x12\x21\xea\x40\xb1\x0e\x86\x9d\xe1\xac\xaf\xd0\xae\x59\xa0\x67\xce\xbe\x79\x63\x6f\x45\x98\xcf\xe9\xde\x02\xc0\xa9\xe2\xf7\xe0\xd3\x3f\xdd\xbc\xb1\xf7\xf5\x87\x47\x0f\xbf\x78\x6f\xf2\xbb\xdf\x1f\x7f\xfe\x87\xaf\x3e\xf8\xe5\xe4\xcd\xbf\x7d\xf5\xf9\xbb\x36\x8e\x27\x1f\xfe\x63\xf2\xd1\xd1\x97\x47\x6f\x4c\x3e\x79\xe3\x3f\xff\xfa\xc0\xbe\xcc\xf4\xb6\xe7\xd1\x84\x39\x76\x16\x97\x25\xae\xee\x78\x2c\xf9\xf2\xe8\x17\x65\x5f\x3c\x64\x89\xcb\x12\x96\xb8\x02\x4d\xa5\x3d\xe9\xbb\x5a\x46\xa9\x1b\xc8\xd8\x0b\x98\x19\xde\xd6\x52\xfc\x98\xa1\x9f\xe5\x08\x4e\xd7\xe0\x0b\xe3\x35\x94\xf6\x91\xa1\xc9\x4e\x3b\x2f\x9c\xcc\xac\xf5\x11\x55\x48\x57\x33\x3a\xf5\x72\x09\x58\xe1\xb8\x5d\x36\x29\x39\xd0\x3e\xd9\x3c\x91\xe2\xc2\x36\x67\x69\x67\x6d\x34\x72\x40\x51\xd1\x43\xb8\xc4\x2e\xc3\xa5\x3e\x6c\xfb\x90\x53\x5e\x20\x8e\xc7\x6b\xa3\xd1\xa5\x7e\xf6\xe3\x00\x8a\x10\x9c\xf1\x78\xc5\xb5\x58\x2e\xfd\xec\x18\x99\x5b\xc1\xe9\x71\x72\xfc\xd9\xd1\xc3\x8f\xdf\x3e\xfe\xec\xe8\xf8\xb3\xbf\x4e\xee\xdd\x9b\xdc\x7d\xe7\x11\x28\x7b\xf2\x82\xdb\xfc\xff\x17\xdc\xe6\xb2\xe0\x36\x57\x0a\x6e\xf3\xc9\x08\x6e\xf3\xdb\x13\xdc\xe6\x05\x0b\xee\xd4\xa3\xd9\x90\x99\x3b\x6f\x9e\x28\xb8\xcd\x65\xc1\x5d\xd0\xba\xe6\x54\xeb\xce\x14\xdf\xe6\xc5\x88\x6f\xf3\x74\xf1\x6d\xae\x12\xdf\x7e\xd3\xcd\xf4\x97\x53\xcf\xea\x6b\xa5\x47\x27\x88\xa1\x2b\x30\x6d\xba\x18\xa6\x6e\x20\xbc\x1e\x9a\xdd\x97\xdd\x24\x4a\xfe\x27\xe2\xdb\xbc\x68\xf1\x6d\xae\x10\xdf\xe6\x39\xc5\xb7\x79\x5e\xf1\x6d\x3e\x29\xf1\x6d\x7e\xa7\xc4\xf7\x51\x72\x5c\x27\xa5\xb1\x5a\x9e\x5d\xfc\x8a\xdc\xdf\xca\xec\xdc\x5c\x46\x2e\x99\x6d\x5f\x18\x67\x90\xe5\x75\x1d\x6e\xff\xa2\xca\x1d\xd1\x51\x48\x0f\x56\x26\x07\x37\x36\xae\x24\x87\x57\x33\x43\xcd\x5e\xc7\x6d\xd8\xd8\x4c\x0e\xaf\xe6\x51\xc2\x65\x4f\xdb\xf7\x5d\x72\x7a\x46\xd2\xf2\x90\x6d\xa4\x65\xa3\x24\x31\xf9\x80\x6e\x2a\xb2\x1c\x21\xf4\xd0\xfc\x3c\x45\x35\x7c\xd5\x86\x52\x87\x63\x6d\x7d\x54\xc0\xf5\xa9\x82\x3b\xb6\x0b\x7c\x18\x30\x11\xca\x81\xcb\x65\x40\xad\x95\xab\x91\xaa\x20\x72\x75\xda\xd1\x46\x31\xd1\xab\x6d\xac\x5f\x2d\xcc\x58\x17\x6a\x85\x99\xef\x03\xd1\xb4\x8f\x2f\x1d\xf8\x59\x1e\x79\x1d\x46\x53\xb7\x2c\x22\x46\x0a\xbb\xe0\x03\xf1\x66\x09\x66\xca\x51\x99\x1a\x39\xfe\xe2\xa3\xc9\xa7\xef\x3f\xf8\xcd\xdd\xc9\x5b\xf7\x48\x99\xd7\xc8\xa3\x33\xff\xbb\xbc\x85\xb5\x72\xfd\x1d\xec\x4a\x85\xd9\x1b\xd2\x27\x64\x6d\x7e\xeb\xcb\xe9\xb4\xe9\xfa\x42\x19\xa4\x31\x0a\xe3\xf6\xd0\x3c\xcf\xd1\x16\x9f\x1b\xee\x86\xb5\xe2\x39\xba\xee\x86\x2c\x4b\x71\x87\x3e\x64\x39\xee\xca\xde\x2b\x53\xce\x92\x30\x67\xe2\xe5\xb2\x5c\x5d\xef\xda\x59\x4b\xa9\xbc\xb6\xd7\x5d\x26\x04\xaa\x17\x5e\x79\x71\xcf\xfa\xf0\xd9\x20\x40\xad\x7f\x86\x43\xd8\x6d\x93\x73\xc1\x14\xef\xce\x13\x71\x8a\xfe\x73\x60\xe5\x27\x7e\x01\xa8\x94\x69\x45\x63\x37\x90\x42\x4b\x8e\x2e\xe5\x6c\x98\x8a\xec\x83\x39\xa6\x82\xf6\xd0\xa3\x07\xa4\x60\x75\x9e\xa7\xe5\x84\xdb\xf7\x84\xa7\xc7\x63\xe7\x15\x79\x80\xe2\xb1\x29\x29\xe9\xc8\x9d\x6c\x6f\x4e\x1a\x04\x32\x15\xc6\x33\x33\xfc\x45\x46\x56\x27\xdd\xce\x66\xe5\x64\x57\x38\xe5\x46\x2a\x9e\x05\xff\x9c\x7c\x3c\x7a\x30\x58\x39\x3a\xaf\x55\x41\x39\xf9\xf6\xb9\x0a\xa9\x8e\xdc\x99\xef\xb3\xb3\x93\x28\xd9\x65\x1c\xb3\xef\xa6\x8c\x31\x3d\x47\x99\x15\xc1\x30\xcf\xab\x82\x0f\x4f\x8f\x46\xb3\x7c\xe8\x78\xfc\x74\x3e\x46\x0f\x98\x09\xa2\x5a\x31\x6c\xaa\xff\x01\xd5\xb3\xff\x25\x6c\x57\xa4\x7b\x59\x37\xa7\x5d\xd9\x4d\x76\x75\x4e\xa3\x4b\xa0\x22\x7d\x5d\x05\x5a\x3e\xd8\xe7\x01\xaa\x64\x5c\xab\x60\xab\x63\xf2\x74\xc0\x10\xbb\x34\xe5\xe6\x9b\x6f\x6e\x9c\x5d\xb1\xe5\xc5\x7a\xda\x25\xbb\x27\x7b\xba\x72\x44\x2c\x2f\xf4\x36\x3d\x04\x1f\x04\x0e\xe0\xb5\x17\xf7\x5e\x30\x26\xb9\x81\x77\x52\xd4\xa6\x36\xbd\x4c\xed\x10\x57\x26\x28\x6a\xa4\x87\x86\x5c\x26\x5e\x76\xeb\xcf\xf7\x6b\x14\xe1\xa2\x89\x50\x48\xc3\xa1\x36\xd4\x60\x10\x65\x9f\x7e\xfe\x6c\x39\xb5\xea\x45\x6c\xb5\x30\xb3\xc9\x2c\xf6\xad\x85\xef\x6f\xc1\x53\x4f\xe5\xd8\x86\x9a\x54\xfb\x7e\xa3\x5e\xaf\x1a\x9d\x12\xc4\xf9\x02\xe7\x02\xb8\x80\xd7\x89\x14\x1a\x5f\xc1\x43\x53\xe0\x7c\x79\x74\x34\x5e\x70\x67\x79\xa1\xe7\xee\xca\xc3\x13\xcd\xae\x30\xa8\xfa\x94\xd7\x8a\x9e\xcb\x70\x05\x7e\x08\x1b\xf5\x7a\x7d\x7d\x9e\x80\x96\x17\x99\x98\xef\xfc\x37\x00\x00\xff\xff\x34\x44\xef\x5b\xc4\x21\x00\x00")


func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 8644, mode: os.FileMode(420), modTime: time.Unix(1599195796, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
