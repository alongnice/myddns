// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5b\x6f\xdb\xc8\x15\x7e\xf7\xaf\x38\x1d\xe4\x21\x01\x76\x44\x9b\xf6\x12\x5b\x2f\x29\x60\x37\x5a\xb4\x06\xd2\x6c\x1b\xc3\x41\xdf\x8c\x21\x79\x24\x4e\x3c\x9c\x61\x66\x86\x92\x55\x41\x40\x1e\x7a\x47\x8a\xfa\x61\x0b\x2c\xb6\xbb\x48\x0b\x14\x45\xb1\xc5\x36\x7d\x4c\x8b\x5e\xfe\x8c\x95\xdd\x3e\xf5\x2f\x14\x43\x52\x16\x75\xb1\x93\x34\x71\x2f\x7a\x10\x67\xce\x9c\xeb\x77\x2e\xd4\x28\xcc\x6c\x2e\x40\x30\x39\x88\x08\x4a\xd2\xdd\xda\x0a\x33\x64\x69\x77\x0b\x20\xcc\xd1\x32\x48\x32\xa6\x0d\xda\x88\x94\xb6\x4f\xdf\x21\x8b\x83\xcc\xda\x82\xe2\xc3\x92\x0f\x23\xf2\x5d\x7a\xf4\x1e\xbd\xad\xf2\x82\x59\x1e\x0b\x24\x90\x28\x69\x51\xda\x88\x1c\x7c\x10\x61\x3a\xc0\x96\x9c\x64\x39\x46\x64\xc8\x71\x54\x28\x6d\x5b\xac\x23\x9e\xda\x2c\x4a\x71\xc8\x13\xa4\xd5\xe6\x2d\xe0\x92\x5b\xce\x04\x35\x09\x13\x18\xed\xac\xa9\x61\xa5\xcd\x94\x6e\x29\x79\xc0\x1b\x5b\x96\x5b\x81\xdd\x5e\xef\xee\x21\xfd\xc6\x87\xa1\x57\x6f\xdd\xc1\xd7\x28\x85\xf7\x95\xb2\xc6\x6a\x56\xc0\xed\xc3\x43\xa0\xb4\x3a\x10\x5c\x9e\x80\x46\x11\x11\x63\xc7\x02\x4d\x86\x68\x09\x64\x1a\xfb\x11\xf1\x8c\x65\x96\x27\x5e\x3c\x17\xec\xe4\x5c\x76\x12\x63\xc8\x4b\x8b\x26\x2a\xcf\xd5\x5c\x26\xf4\x6a\x94\xb7\xc2\x58\xa5\xe3\x4a\x87\x23\xa0\x76\x4b\x80\x30\xe5\x43\x48\x04\x33\x26\x22\x92\x0d\x63\xa6\xa1\x7e\xd0\x94\xe9\x13\x88\x07\xf5\xd3\x64\x2c\x55\x23\x6a\x72\x52\x8b\x2d\x0b\x3a\x4c\x18\x97\xa8\x21\xa5\x7d\x81\xa7\xf0\xa0\x34\x96\xf7\xc7\xb4\x01\x8b\xc6\x68\x47\x58\x25\x1d\x9a\x4f\xc8\xe6\x4e\x93\x65\xf3\x34\xd6\x4c\xa6\x73\x45\x4c\xf0\x81\xa4\xdc\x62\x6e\x68\x82\xd2\xa2\x6e\xe9\x00\x08\xcd\x70\x00\xa7\xb9\x90\x26\x22\xae\x4a\xf6\x3d\x6f\x34\x1a\x75\x46\xbb\x1d\xa5\x07\x9e\xbf\xbd\xbd\xed\x99\xe1\x80\x40\x9d\x70\xe2\x6f\x13\xc8\x90\x0f\x32\x5b\xaf\xfb\x5c\x88\x88\x48\x25\x91\x80\xb1\x5a\x9d\x60\x44\x92\x52\x6b\x94\xf6\xb6\x12\x4a\x93\x96\x29\x68\x38\xa8\xe0\x12\x13\x56\x44\x44\xab\x52\xa6\xa4\x4d\x7e\xa0\xb8\x5c\xa5\xcf\x4d\x13\x60\x9a\x33\x9a\xf1\x34\x45\x19\x11\xab\x4b\xbc\x88\x3c\xd7\xd4\x5f\xb6\xe5\x8a\xf6\x7d\x75\x1a\x91\x6d\xd8\x06\x7f\x0f\xfc\x3d\x02\x7d\x95\x94\x86\xc5\x02\x23\xd2\x67\xc2\xe0\x12\x12\x00\x61\xc1\x6c\x06\x69\x44\xbe\xe5\xef\xc2\xce\xd7\x99\x0f\x3e\x38\xe9\x1d\xea\x83\xff\xcd\xdd\xf6\x9e\xfa\xf7\xdf\x59\xec\xc1\xa7\x7e\xb6\x27\x7c\xba\x9b\x05\xc2\x87\xdd\x6c\xaf\x7d\x06\xfe\xf7\x08\x78\x2b\xa6\x12\xae\x13\x81\x90\x9c\x46\x64\xc7\x27\x90\x8c\x23\xb2\xb3\x4b\x40\x47\x64\xcf\x31\x87\x0e\xf5\xe5\x3c\x59\xad\xe4\x60\xd1\x24\xcd\x7e\x51\x0e\x1e\xbb\x28\x2c\x2f\xe5\xc3\xa6\x38\xe7\xcb\xba\x88\xeb\x9a\xad\xfa\x92\x71\x09\x5a\x39\x28\xdc\xd2\x81\x3d\xae\x37\x7a\xc0\x25\xb5\xaa\xd8\x87\xdd\xed\xe2\x94\x2c\x8a\x7c\x73\xdd\x0a\x9a\xa7\x34\x00\xd5\xef\x1b\xb4\x6e\xbd\xdb\xae\xd1\xbe\xd2\x39\xb0\xc4\x72\x25\x5d\x77\xb1\x21\x12\xc8\xd1\x66\x2a\x8d\x48\xa1\x8c\x75\x43\xac\x15\x64\x5c\x5a\xab\x24\xd8\x71\x81\x11\x31\x65\x9c\x73\x7b\x91\xe2\xd8\x4a\x88\xad\xa4\x85\xe6\x39\xd3\xe3\x55\x8f\x63\x65\xad\xca\xf7\xc1\xdf\x2e\x4e\xdf\x25\xdd\x43\x36\xc4\xd0\xab\xf5\x2d\xdb\x68\x79\xef\x86\x9a\x40\xbb\x5a\x06\xd9\xdb\x2b\x0c\xc7\xc7\x0e\x3c\xd2\xed\xdd\x3d\x3c\xff\xdb\x2f\x67\x7f\xfe\x68\xf6\x8b\x1f\x86\x5e\xf6\xf6\x8a\xdc\xba\xe6\xe3\x63\x37\x32\x96\x83\x5c\x65\x75\x10\xd1\x24\xc3\xe4\x64\xc5\x8f\x8a\x91\xcb\xa2\xb4\xeb\xac\xb4\xa2\x93\x06\x29\xcd\x52\xae\x48\x33\x66\x7b\xd2\xdc\x65\x39\x12\xe0\x69\x44\x98\xe0\xa9\x34\x04\x86\x4c\x94\xb8\xd8\x56\x3a\x30\xdd\x60\x4f\xb0\x18\xc5\x06\x7b\x15\xdd\x75\x90\xbe\xd0\xb2\x2e\x0d\xf0\x5e\x75\xb4\xae\xd6\xab\xe4\x57\x25\x5a\x85\xda\x7c\x5e\x84\xd3\x40\xab\xb2\xd8\x84\x53\xed\x77\xe5\x5e\x4f\x9a\x83\x1e\xe9\x1e\xf4\x2e\xb1\xba\x19\x55\x25\xad\x56\xa2\x05\xe2\x41\xaf\x86\xb0\x59\x36\x08\x4e\x26\x9d\xde\xdd\xc3\xce\x41\x6f\x3a\x5d\x73\xe3\xda\xc2\x39\xc4\x44\xbb\x32\xad\x9f\xaf\x17\x56\xa3\x6b\x1e\xda\x7c\xbb\x1c\x5e\x4d\xbd\x3c\xc4\xad\x2b\xc3\x5e\x67\x7a\x9d\xa6\x3b\xf8\xf6\xfd\xbd\x57\x6b\xb6\x55\x5c\x5e\x31\x1f\xf0\x32\x1d\x59\x37\x5e\xc5\x14\xab\x53\x72\x79\x87\x3a\x9c\x79\x31\xdc\x3b\x46\xc9\xaa\x9f\x5b\x75\x26\x0e\x8a\xe1\xde\x07\x0d\x65\x32\xe1\x7d\xc0\x87\x70\xa3\xe3\xa8\x9d\x9a\x0c\xee\xfd\x36\x9d\x36\x9d\x3a\x99\xa0\x4c\xa7\xd3\x7f\xb3\x61\xdb\xf6\xbb\xcf\x3f\x7e\x3a\x3b\xfb\xed\xec\xec\xe9\x97\x1f\xfd\xee\xea\xbe\x7c\x13\xd5\x5b\x99\x2e\xb5\x20\xdd\xa3\x7b\x77\x5e\x54\xb9\x35\xa8\x8e\xfb\xaa\x22\x76\x20\x1d\x39\x9e\x0b\x68\x2b\x89\xea\xc7\x41\x8a\x26\xd1\x3c\xc6\x34\x1e\x2f\xce\x8e\x33\x14\x45\xbb\xc4\x2b\x98\x8f\xee\xdd\xd9\x50\xe0\xee\x4d\x9b\x33\x21\x96\x94\x37\x0a\xda\x3e\x59\x3c\xb5\xe0\xbe\x68\x5e\x5a\x4c\x49\x77\xf6\xf3\xa7\x5f\xfd\xe8\xf3\xd9\x1f\x3e\x39\xff\xd3\x4f\x8e\xee\xdd\xf9\xe7\x5f\x1e\x3f\xff\xe2\x37\x47\xf7\xee\xfc\xe3\xd3\x47\xb3\xc7\x3f\x98\x9d\xfd\xfe\xfc\xaf\xbf\xfa\xf2\x93\xef\xbb\x6a\x9e\x7d\xfa\xc7\xd9\x67\x8f\x42\xaf\x32\x74\xdd\xd8\xa7\xca\xbd\xdf\x0d\xe9\xf6\xea\xc5\xe5\x39\x70\xd1\x30\x8d\x6c\x33\xf6\x17\x78\xcc\x15\xb6\xb2\xd1\x9b\x93\xb4\x1a\x99\x88\xec\x5e\x9a\x8c\x46\xb6\xc6\xb3\xbb\x35\x99\x50\xd0\x4c\x0e\x10\x6e\xf0\xb7\xe0\xc6\x10\xf6\x23\xa8\x93\xd3\x68\x9c\x4e\xb7\x26\x93\x1b\xc3\xea\x41\x01\x65\x0a\x74\x3a\xdd\xf0\x76\x99\xbb\xfe\xe2\x6c\x2e\x79\x70\x75\x46\xcf\x9f\x3d\xfa\xea\xd7\x8f\xcf\x9f\x3d\x3a\x7f\xf6\xf9\xec\xc9\x93\xd9\xd9\xcf\x5e\x21\x65\xd7\x3f\x14\x83\xff\xff\xa1\x18\xac\x0f\xc5\x60\xe3\x50\x0c\xae\x67\x28\x06\xff\xbd\xa1\x18\xbc\xb1\xa1\x78\x81\x65\xc5\xb2\x00\xf2\xe8\xd2\xa1\x18\xac\x0f\x45\x77\xf5\x33\xfb\x9e\xc7\x0a\x4e\x1d\x47\x87\x17\x1d\x13\x7b\x7c\x63\x24\x4b\x2d\x15\xbc\xf9\x01\x19\xfc\x07\x07\x64\xf0\xa6\x07\x64\xb0\x61\x40\x06\x2f\x39\x20\x83\x97\x1d\x90\xc1\x75\x0d\xc8\xe0\x7f\x6a\x40\xbe\xca\x75\xf0\xb2\x1b\x5f\xe8\x39\xe7\xaf\xbe\x1a\xbb\x88\x2b\x91\xd0\xe5\xa3\xb0\x35\x43\xbf\x94\xd5\xc5\x15\x06\x68\xbf\x53\xa2\x1e\xdf\x77\x49\x8b\x05\xde\xbc\x35\x69\xd4\x0d\x99\x86\x87\xee\x08\x22\x18\x71\x99\xaa\x51\x47\xa8\x84\x39\xa9\x8e\x41\xa6\x93\xac\x63\xca\xd8\x58\xcd\xe5\xe0\xe6\xce\xad\x77\x1b\x31\xde\x87\x9b\x8d\x58\x14\x01\x71\xd7\xe2\x0f\x4f\xa2\xea\x0f\x8d\x5b\x30\xb9\x70\x7d\x55\x63\xa6\xb1\x0f\x11\x10\x6f\xf1\x4f\x07\x13\xa8\xed\x4d\x72\xfe\xf7\xcf\x66\x5f\x7c\xfc\xfc\xc7\x67\xb3\x9f\x3e\x21\xb7\x9a\xd3\xba\x0e\xea\xef\xf5\x10\xaa\xc0\xe7\xe1\x6e\x85\x5e\x66\x73\xd1\xfd\x57\x00\x00\x00\xff\xff\xcb\xa1\x04\x08\x62\x14\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 5218, mode: os.FileMode(420), modTime: time.Unix(1598592638, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
