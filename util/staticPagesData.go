// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x6d\x6f\x1b\xc7\xf1\x7f\xaf\x4f\x31\xff\x85\x81\x48\x40\x8e\x27\x51\x0a\x91\xbf\xcc\x23\x60\x9b\x6e\x23\xd4\x71\x5a\x2b\x32\xfa\x4e\xd8\xbb\x1b\xf2\xd6\xda\xdb\x3d\xef\xee\x91\x62\x09\x02\x6a\xd0\xb4\x45\x90\x00\x0e\x90\x02\x46\xea\xd4\x4d\xd1\x06\x45\xd1\xd4\x7d\x69\x14\x4d\xfd\x61\x22\xfa\xe1\x55\xbf\x42\xb1\x77\x47\xf2\x28\x9e\x1e\x6c\xc9\x4d\xaa\x17\xba\x7d\x98\x99\x9d\x99\xdf\xec\x8f\x77\xd3\x8c\x4c\xcc\x81\x53\xd1\xf5\x08\x0a\xd2\x5a\x5a\x6a\x46\x48\xc3\xd6\x12\x40\x33\x46\x43\x21\x88\xa8\xd2\x68\x3c\x92\x9a\x8e\xf3\x36\x99\x6d\x44\xc6\x24\x0e\xde\x4d\x59\xcf\x23\x3f\x75\x76\xae\x38\xd7\x64\x9c\x50\xc3\x7c\x8e\x04\x02\x29\x0c\x0a\xe3\x91\xad\xeb\x1e\x86\x5d\x2c\xe9\x09\x1a\xa3\x47\x7a\x0c\xfb\x89\x54\xa6\x24\xda\x67\xa1\x89\xbc\x10\x7b\x2c\x40\x27\x9b\xbc\x09\x4c\x30\xc3\x28\x77\x74\x40\x39\x7a\x6b\x0b\x66\x68\x6a\x22\xa9\x4a\x46\xee\xb0\xe2\x2c\xc3\x0c\xc7\x56\xbb\x7d\x73\xdb\xf9\xe1\x7b\x4d\x37\x9f\xda\x8d\xff\x73\x1c\xb8\x2a\xa5\xd1\x46\xd1\x04\xae\x6d\x6f\x83\xe3\x64\x1b\x9c\x89\x3d\x50\xc8\x3d\xa2\xcd\x80\xa3\x8e\x10\x0d\x81\x48\x61\xc7\x23\xae\x36\xd4\xb0\xc0\xf5\x27\x8a\xb5\x98\x89\x5a\xa0\x35\x39\xb3\x6a\x20\xe3\x58\x4e\x74\x9a\x6e\x9e\xe5\xa5\xa6\x2f\xc3\x41\x66\xc3\x2e\xa0\xb2\x43\x80\x66\xc8\x7a\x10\x70\xaa\xb5\x47\x04\xed\xf9\x54\x41\xfe\x70\x42\xaa\xf6\xc0\xef\xe6\x4f\x1d\xd1\x50\xf6\x1d\x1d\x93\x5c\x6d\x5e\xd1\xe6\x84\x32\x81\x0a\x42\xa7\xc3\x71\x1f\xee\xa4\xda\xb0\xce\xc0\x29\x92\xe5\xf8\x68\xfa\x98\x81\x0e\xc5\x5f\x93\x4e\x9c\x26\xf3\xc7\x3b\xbe\xa2\x22\x9c\x18\xa2\x9c\x75\x85\xc3\x0c\xc6\xda\x09\x50\x18\x54\x25\x1b\x00\x4d\xdd\xeb\xc2\x7e\xcc\x85\xf6\x88\xad\x92\x4d\xd7\xed\xf7\xfb\xb5\xfe\x7a\x4d\xaa\xae\x5b\x5f\x5d\x5d\x75\x75\xaf\x4b\x20\x07\x9c\xd4\x57\x09\x44\xc8\xba\x91\xc9\xc7\x1d\xc6\xb9\x47\x84\x14\x48\x40\x1b\x25\xf7\xd0\x23\x41\xaa\x14\x0a\x73\x4d\x72\xa9\x48\xe9\x28\x28\x24\x1c\xce\x04\x06\x34\xf1\x88\x92\xa9\x08\x49\x79\xf9\x8e\x64\xe2\xe8\xfa\xe4\x68\x02\x54\x31\xea\x44\x2c\x0c\x51\x78\xc4\xa8\x14\xa7\x91\xc7\xca\xa9\xcf\x9f\x65\x8b\xf6\xaa\xdc\xf7\xc8\x2a\xac\x42\x7d\x03\xea\x1b\x04\x3a\x32\x48\x35\xf5\x39\x7a\xa4\x43\xb9\xc6\xb9\x4c\x00\x34\x13\x6a\x22\x08\x3d\xf2\x6e\x7d\x1d\xd6\xfe\x9f\xd6\xa1\x0e\x56\x7b\xcd\xa9\x43\xfd\x9d\xf5\xf2\xdc\xa9\xdf\x7e\x7b\x36\x87\xba\x53\x8f\x36\x78\xdd\x59\x8f\x1a\xbc\x0e\xeb\xd1\x46\x79\x0f\xea\x3f\x23\xe0\x1e\x39\x2a\x60\x2a\xe0\x08\xc1\xbe\x47\xd6\xea\x04\x82\x81\x47\xd6\xd6\x09\x28\x8f\x6c\x58\xe1\xa6\xcd\xfa\x3c\x4e\x46\x49\xd1\x9d\x5d\x92\x62\x3e\x2b\x07\x97\x4e\x0b\xcb\x0d\x59\xaf\x28\xce\xc9\x30\x2f\xe2\xbc\x66\xb3\x7b\x49\x99\x00\x25\x6d\x2a\xec\xd0\x26\x7b\x90\x4f\x54\x97\x09\xc7\xc8\x64\x13\xd6\x57\x93\x7d\x32\x2b\xf2\xea\xba\xe5\x4e\x1c\x3a\x0d\x90\x9d\x8e\x46\x63\xc7\xeb\xe5\x1a\xed\x48\x15\x03\x0d\x0c\x93\xc2\xde\x2e\xda\x43\x02\x31\x9a\x48\x86\x1e\x49\xa4\x36\x96\xc4\x4a\x41\xfa\xa9\x31\x52\x80\x19\x24\xe8\x11\x9d\xfa\x31\x33\x53\x88\x7d\x23\xc0\x37\xc2\x49\x14\x8b\xa9\x1a\x1c\xf5\xd8\x97\xc6\xc8\x78\x13\xea\xab\xc9\xfe\x65\xd2\xda\xa6\x3d\x6c\xba\xb9\xbd\xf9\x33\x4a\xde\x5b\x52\xe3\x68\x8e\x96\x41\xf4\xd6\x11\x81\xdd\x5d\x9b\x3c\xd2\x6a\xdf\xdc\x7e\xfa\xe0\x93\xf1\x47\x5f\x8e\x7f\xf3\xcb\xa6\x1b\xbd\x75\x44\x6f\xd1\xf2\xee\xae\xa5\x8c\x23\xf6\xe7\x25\x6d\x86\x9c\xae\x92\x69\xb2\x20\x56\x21\x18\x44\x18\xec\xc1\x6c\xe8\x30\x61\xaf\x4d\x85\x2a\x40\x93\x89\x24\x35\x8b\xea\x4e\xb6\x4e\x8a\x2c\x2b\x1a\x32\x49\x0a\x8a\x6e\x0b\x7d\x93\xc6\x48\x80\x85\x1e\xa1\x9c\x85\x42\x13\xe8\x51\x9e\xe2\x6c\x2a\x45\xc0\x59\xb0\x37\x59\xb8\x66\x4d\x62\xf8\x83\x54\x2c\xaf\x10\x18\x0e\x59\x07\xf0\x2e\x5c\xaa\xb5\x6f\x6e\xd7\xac\x2d\x98\x28\x8e\x46\x41\x2e\x3a\x1c\xa2\x08\x47\xa3\x4a\x97\x39\xf5\x91\x57\xb8\x9c\xad\xdb\x0b\xac\xa6\x8e\x54\xe9\x03\x5c\xc9\x36\x97\x5f\xdc\x7f\xf2\xe2\x57\x1f\x1f\xfe\xe3\xd3\x95\xaa\x53\xdc\xcc\x5c\x45\xba\xdd\x52\x99\x7f\x4f\x50\x08\x85\x4e\x64\x38\x45\x61\x32\x9d\xa2\x90\x2f\x9c\x8e\x42\xa1\x78\x61\x28\x14\xf6\xaa\x51\x68\x67\x9b\xcb\xcf\x3f\xfc\xd7\xf3\xbf\x3d\xba\x28\x14\xec\xcb\xc0\x77\x0a\x45\xc0\x65\x1a\x76\x38\x55\x38\x85\xa3\xbc\x34\x85\x64\xb6\x38\x07\xcb\x2b\xa7\xba\x74\x48\x75\xba\xaf\x4d\x05\x5e\x3e\xcf\xc5\x1b\xd5\xa9\x00\x9c\x9d\xb3\xf2\x90\x32\xcf\xdb\x42\x6f\xb5\xa7\x75\xbc\x15\xde\xc8\xa2\x6a\x6d\xb5\x8f\x77\xaa\x02\x23\x29\x8c\x92\xbc\x04\xc9\xc4\x66\x31\x2c\xb0\x18\x0e\xb3\x72\xdf\x6a\x8f\x46\x8b\x8c\xbb\x10\xd2\x05\x85\xb7\x8d\x81\x42\x43\xa6\x11\x16\xf3\x56\xfe\x3c\x5f\x98\x85\xad\x49\xa8\x93\xe9\x7c\xb8\xf9\xea\xf1\x21\x2f\x9d\x98\x86\x45\xa1\xf3\xfc\x3e\x6e\xfd\xf8\xf6\xc6\x79\x7e\x17\xe1\x65\xf1\x29\x5d\xfc\x2a\xa8\xf2\x24\xe7\xd7\x3a\x13\xf2\xe5\x3e\x39\xfe\xfe\xdb\x3c\xb3\xa4\xb7\xb1\x8b\x82\x66\x5f\x46\x39\x12\x5b\x49\x6f\xe3\x7a\xb1\x32\x63\x56\xbb\x5a\xcb\x97\xc1\xbe\x8a\x9e\x4e\xac\x67\xba\xeb\xe5\xf3\x5b\x4f\xef\x3f\x1a\xdf\xfb\x6a\x7c\xef\xd1\xb3\xcf\xfe\x7c\x4c\x29\x55\xa1\xfc\x8a\xd5\x9c\x1d\x9d\x2a\x4e\x5a\x4f\x1f\xfe\xe9\xf9\xa3\x3f\xec\xdc\xba\x71\x5a\xfd\xe6\xa9\xb5\x3a\x27\x95\xb2\x4d\xd5\x8e\x95\x99\x26\x38\xd3\xc8\xde\xe6\x43\xd4\x81\x62\x3e\x86\xfe\x60\xb6\xb7\x1b\x21\x4f\xca\x85\x9e\x25\x7b\xe7\xd6\x8d\x8a\x32\xb7\xaf\xc6\x31\xe5\x7c\xce\x78\x61\xa0\xec\x93\xc1\x7d\x03\xf6\x9f\x13\xa7\x06\x43\xd2\x7a\xfa\xf5\x1f\x77\x6e\xdd\x78\xf1\xe0\xe0\xf9\x93\xcf\xc6\xbf\xfd\xdd\xe1\x37\xbf\x7f\xf6\xf9\x2f\xc6\x1f\xfe\xf5\xd9\x37\x9f\xda\x3a\x1e\x3f\xf8\xfb\xf8\x8b\x83\x6f\x0f\x3e\x18\x7f\xf5\xc1\xbf\xff\xf9\xb9\xfd\x36\xd2\x9b\xae\x4b\x13\xe6\xd8\x53\x6a\x2c\xa9\x69\xdf\x65\xc9\xb7\x07\x3f\x2f\xbe\x9b\xba\x28\x59\x52\x13\x98\xd6\x30\x4c\x6b\x81\x68\xba\x99\x63\xaf\x1b\xb1\x50\xda\x17\x78\x4d\x5a\xed\x7c\x70\x3c\x66\x36\x7a\xaa\x90\x56\x63\x35\xcd\xdf\xc4\x60\x09\xbd\xf6\x64\x49\xc9\xbe\xf6\xc8\xfa\xb1\xe0\x15\xba\x79\xfe\x5b\x4b\xc3\xa1\x03\x8a\x8a\x2e\xc2\x25\xf6\x26\x5c\xea\xc1\xa6\x07\x39\x98\x85\xc5\xd1\x68\x69\x38\xbc\xd4\xcb\x1e\x0e\xa0\x08\xc1\x19\x8d\x2a\x7e\xa9\x26\xae\x9f\x8e\xfe\x9c\x07\x27\x57\xc0\xe1\xe3\x83\xe7\x5f\x7e\x7c\xf8\xf8\xe0\xf0\xf1\x5f\xc6\x0f\x1f\x8e\xef\x7d\xf2\x12\x90\xbd\x7e\x2a\x6d\xfc\xef\x53\x69\x63\x91\x4a\x1b\x95\x54\xda\x78\x3d\x54\xda\xf8\xee\xa8\xb4\x71\xc1\x54\x3a\xcd\x68\x26\x32\x4b\xe7\xce\xb1\x54\xda\x58\xa4\xd2\x23\x2c\xd6\x98\xb2\xd8\xa9\xb4\xda\xb8\x18\x5a\x6d\x9c\x4c\xab\x8d\x93\x68\xb5\xf1\xdf\xe4\xd5\xc6\x45\xf3\x6a\xa3\x82\x57\x1b\x67\xe4\xd5\xc6\x59\x79\xb5\xf1\xba\x78\xb5\xf1\xbd\xe2\xd5\x97\x69\x13\x1d\xd7\x09\x6a\xba\xd6\xf9\x93\x5b\x66\x36\xe2\x4c\xa5\x69\xf1\x48\x4c\x2e\xd0\x49\x45\xd6\xd0\x82\x2e\x9a\x9f\xa4\xa8\x06\xb7\x2d\x68\x3e\xc7\xe5\x95\x61\x61\xae\x47\x15\xdc\xb5\x5b\xe0\x41\x9f\x89\x50\xf6\x6b\x5c\x06\xd4\x6a\xd5\x34\x52\x15\x44\x35\x9d\xfa\xda\x28\x26\xba\xcb\x6b\x2b\x97\x0b\x35\xd6\x81\xe5\x42\xcd\xf3\x80\x68\xda\xc3\xf7\xf6\xbc\xac\xd1\xb9\x02\xc3\xa9\xeb\x47\x2d\x46\x0a\x3b\xe0\x01\x71\x67\x1d\x50\xca\x51\x99\x65\x72\xf8\xe4\x8b\xf1\xd7\xf7\x9f\xfe\xfa\xde\xf8\xa3\x87\x64\xf2\x11\x9e\xd7\x41\xfe\x7f\x31\x84\xa5\xf9\x18\x17\x9b\x3c\x53\x47\x42\x19\xa4\x31\x0a\x53\xeb\xa2\xb9\xce\xd1\x0e\xaf\x0e\xb6\xc2\xe5\xf2\xa7\xde\x4a\x8d\x09\x81\xea\x9d\xf7\xdf\xbd\x61\x3d\xbc\x12\x04\xa8\xf5\x8f\x70\x00\x5b\x6d\x72\x26\x33\xc5\x47\xcf\xb1\x76\x8a\xfd\x22\xa4\x79\xdf\x17\x5b\x23\xe7\xf1\xfd\x7c\x1e\xbf\x2f\xf7\x50\x54\xbb\x59\xdd\x2e\x98\xba\x5a\xd6\xb1\x75\x15\xe6\x2d\x09\xf0\xe0\x8d\xe1\x70\xd6\xe1\x19\x8d\xde\xc8\x65\x74\x9f\x99\x20\x5a\x2e\xc4\xa6\x25\x19\x50\x3d\xeb\xc5\x6d\x96\xaa\x69\x11\xe1\xe9\x96\xaf\x90\xee\x5d\x9e\x2b\x9b\x89\xa1\xa2\xfd\x53\x36\xb4\x98\xee\xb3\x18\x2a\x35\x37\xca\xc6\xaa\x93\x72\xb2\xc1\x10\x3b\x34\xe5\xe6\xd5\x83\x1b\x65\xb7\x7e\x72\xd7\x97\x9a\x6e\x64\x62\xde\xfa\x4f\x00\x00\x00\xff\xff\x51\x04\xe8\xd9\x77\x1b\x00\x00")


func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 5218, mode: os.FileMode(420), modTime: time.Unix(1598863603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
